// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: zeropsApiProtocol.proto

package zeropsApiProtocol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorCode int32

const (
	ErrorCode_NO_ERROR                                                     ErrorCode = 0
	ErrorCode_INTERNAL_SERVER_ERROR                                        ErrorCode = 1
	ErrorCode_INVALID_USER_INPUT                                           ErrorCode = 2
	ErrorCode_INVALID_USER_INPUT_WITH_TEXT                                 ErrorCode = 3
	ErrorCode_NOT_AUTHORIZED                                               ErrorCode = 4
	ErrorCode_INSUFFICIENT_PRIVILEGES                                      ErrorCode = 5
	ErrorCode_REFRESH_TOKEN_INVALID                                        ErrorCode = 6
	ErrorCode_ENDPOINT_NOT_FOUND                                           ErrorCode = 7
	ErrorCode_POTENTIALLY_FRAUD_BEHAVIOR_DETECTED                          ErrorCode = 8
	ErrorCode_RE_CAPTCHA_RESPONSE_INVALID                                  ErrorCode = 9
	ErrorCode_DOWNLOAD_TOKEN_INVALID_OR_EXPIRED                            ErrorCode = 10
	ErrorCode_INCORRECT_USER_CREDENTIALS                                   ErrorCode = 11
	ErrorCode_NO_RIGHTS_TO_SELECTED_ACTION                                 ErrorCode = 12
	ErrorCode_FILE_SIZE_LIMIT_EXCEEDED                                     ErrorCode = 13
	ErrorCode_ADDITIONAL_VERIFICATION_FAILED                               ErrorCode = 14
	ErrorCode_AT_LEAST_ONE_MANAGER                                         ErrorCode = 15
	ErrorCode_ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT         ErrorCode = 16
	ErrorCode_INVALID_CREDENTIALS                                          ErrorCode = 17
	ErrorCode_PASSWORD_TOO_WEAK                                            ErrorCode = 18
	ErrorCode_NO_ACTIVE_CONNECTION_TO_ANY_CLIENT                           ErrorCode = 19
	ErrorCode_NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT                       ErrorCode = 20
	ErrorCode_TOKEN_EXPIRED                                                ErrorCode = 21
	ErrorCode_CLIENT_NOT_FOUND                                             ErrorCode = 22
	ErrorCode_NO_ACCESS_TO_ZEROPS                                          ErrorCode = 23
	ErrorCode_USER_NOT_FOUND                                               ErrorCode = 24
	ErrorCode_INVALID_DOCUMENT_ROOT                                        ErrorCode = 25
	ErrorCode_INVALID_ENTRYPOINT                                           ErrorCode = 26
	ErrorCode_DOWNLOAD_EXPIRED                                             ErrorCode = 27
	ErrorCode_USER_DATA_NOT_FOUND                                          ErrorCode = 28
	ErrorCode_USER_DATA_KEY_INVALID                                        ErrorCode = 29
	ErrorCode_USER_DATA_CONTENT_INVALID                                    ErrorCode = 30
	ErrorCode_USER_DATA_USE_OF_SYSTEM_KEY                                  ErrorCode = 31
	ErrorCode_USER_DATA_DELETE_FORBIDDEN                                   ErrorCode = 32
	ErrorCode_USER_DATA_DUPLICATE_KEY                                      ErrorCode = 33
	ErrorCode_USER_DATA_SYNC_RUNNING                                       ErrorCode = 34
	ErrorCode_USER_DATA_VERSION_MISMATCH                                   ErrorCode = 35
	ErrorCode_USER_TOKEN_NOT_FOUND                                         ErrorCode = 36
	ErrorCode_USER_ACCOUNT_NOT_FOUND                                       ErrorCode = 37
	ErrorCode_TEMPLATE_NOT_FOUND                                           ErrorCode = 38
	ErrorCode_COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER             ErrorCode = 39
	ErrorCode_INVALID_PHONE_NUMBER                                         ErrorCode = 40
	ErrorCode_INVALID_USER_ROLE                                            ErrorCode = 41
	ErrorCode_INVALID_CLIENT_USER_GROUP_COMBINATION                        ErrorCode = 42
	ErrorCode_EMAIL_EXISTS                                                 ErrorCode = 43
	ErrorCode_USER_ALREADY_CONNECTED_TO_COMPANY                            ErrorCode = 44
	ErrorCode_COUNTRY_NOT_FOUND                                            ErrorCode = 45
	ErrorCode_RECORD_NOT_FOUND                                             ErrorCode = 46
	ErrorCode_MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED                            ErrorCode = 47
	ErrorCode_USER_IS_NOT_IN_BEING_DELETED_STATUS                          ErrorCode = 48
	ErrorCode_UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT                            ErrorCode = 49
	ErrorCode_CLIENT_USER_CONNECTION_NOT_FOUND                             ErrorCode = 50
	ErrorCode_CLIENT_USER_CONNECTION_HAS_BEEN_DELETED                      ErrorCode = 51
	ErrorCode_BAD_OR_EXPIRED_ACTIVATION_LINK                               ErrorCode = 52
	ErrorCode_UNABLE_TO_EDIT_DELETED_USER                                  ErrorCode = 53
	ErrorCode_CLIENT_USER_ALREADY_BEEN_DELETED                             ErrorCode = 54
	ErrorCode_LANGUAGE_NOT_FOUND                                           ErrorCode = 55
	ErrorCode_LANGUAGE_NOT_SUPPORTED                                       ErrorCode = 56
	ErrorCode_DUPLICATED_USER                                              ErrorCode = 57
	ErrorCode_RECORD_IS_READ_ONLY                                          ErrorCode = 58
	ErrorCode_RECORD_IS_DELETED                                            ErrorCode = 59
	ErrorCode_RECORD_COMMON_KEY_EDIT                                       ErrorCode = 60
	ErrorCode_IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER                         ErrorCode = 61
	ErrorCode_MANUAL_REPAIR_REQUIRED                                       ErrorCode = 62
	ErrorCode_NOTHING_TO_SYNC                                              ErrorCode = 63
	ErrorCode_SERVICE_STACK_NOT_FOUND                                      ErrorCode = 64
	ErrorCode_SERVICE_STACK_TYPE_NOT_FOUND                                 ErrorCode = 65
	ErrorCode_SERVICE_STACK_TYPE_VERSION_NOT_FOUND                         ErrorCode = 66
	ErrorCode_SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE                     ErrorCode = 67
	ErrorCode_SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT                    ErrorCode = 68
	ErrorCode_SERVICE_STACK_TYPE_INVALID_VERSION                           ErrorCode = 69
	ErrorCode_SERVICE_STACK_IS_FAILED                                      ErrorCode = 70
	ErrorCode_SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED                        ErrorCode = 71
	ErrorCode_SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED                  ErrorCode = 72
	ErrorCode_SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE         ErrorCode = 73
	ErrorCode_SERVICE_STACK_STORAGE_DISK_MAX_LIMIT                         ErrorCode = 74
	ErrorCode_SERVICE_STACK_STORAGE_DISK_MIN_LIMIT                         ErrorCode = 75
	ErrorCode_SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND                 ErrorCode = 76
	ErrorCode_SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED                   ErrorCode = 77
	ErrorCode_SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN                  ErrorCode = 78
	ErrorCode_SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN                  ErrorCode = 79
	ErrorCode_SERVICE_STACK_IS_READY_TO_DEPLOY                             ErrorCode = 80
	ErrorCode_SERVICE_STACK_IS_NOT_HTTP                                    ErrorCode = 81
	ErrorCode_SERVICE_STACK_RELOAD_NOT_AVAILABLE                           ErrorCode = 82
	ErrorCode_SERVICE_STACK_NGINX_CONFIG                                   ErrorCode = 83
	ErrorCode_SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED              ErrorCode = 84
	ErrorCode_SERVICE_STACK_CREATING                                       ErrorCode = 85
	ErrorCode_SERVICE_STACK_UPGRADING                                      ErrorCode = 86
	ErrorCode_SERVICE_STACK_INVALID_CATEGORY                               ErrorCode = 87
	ErrorCode_PROCESS_NOT_FOUND                                            ErrorCode = 88
	ErrorCode_PROCESS_IS_ALREADY_OVER                                      ErrorCode = 89
	ErrorCode_PROCESS_IS_ALREADY_CANCELED                                  ErrorCode = 90
	ErrorCode_PROCESS_IS_ALREADY_RUNNING                                   ErrorCode = 91
	ErrorCode_UNABLE_TO_CANCEL_PROCESS                                     ErrorCode = 92
	ErrorCode_UNABLE_TO_CREATE_PROCESS                                     ErrorCode = 93
	ErrorCode_PROCESS_WRONG_STATE                                          ErrorCode = 94
	ErrorCode_PROCESS_WRONG_SERVICE_STACK_TYPE                             ErrorCode = 95
	ErrorCode_ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT                       ErrorCode = 96
	ErrorCode_INVALID_OLD_PASSWORD                                         ErrorCode = 97
	ErrorCode_PROJECT_STATUS_NOT_SUPPORTED                                 ErrorCode = 98
	ErrorCode_PROJECT_NOT_FOUND                                            ErrorCode = 99
	ErrorCode_PROJECT_IS_NOT_ACTIVE                                        ErrorCode = 100
	ErrorCode_SERVICE_STACK_NAME_UNAVAILABLE                               ErrorCode = 101
	ErrorCode_SERVICE_STACK_NAME_INVALID                                   ErrorCode = 102
	ErrorCode_CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND                    ErrorCode = 103
	ErrorCode_L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND        ErrorCode = 104
	ErrorCode_PROJECT_WILL_BE_DELETED                                      ErrorCode = 105
	ErrorCode_STACK_WILL_BE_DELETED                                        ErrorCode = 106
	ErrorCode_PUBLIC_HTTP_ROUTING_NOT_FOUND                                ErrorCode = 107
	ErrorCode_PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED             ErrorCode = 108
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME                    ErrorCode = 109
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK                       ErrorCode = 110
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING ErrorCode = 111
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING    ErrorCode = 112
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS                 ErrorCode = 113
	ErrorCode_PUBLIC_HTTP_ROUTING_ITEMS_LIMIT                              ErrorCode = 114
	ErrorCode_PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT                          ErrorCode = 115
	ErrorCode_PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT                            ErrorCode = 116
	ErrorCode_PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN                 ErrorCode = 117
	ErrorCode_PUBLIC_HTTP_ROUTING_SSL_FALLBACK                             ErrorCode = 118
	ErrorCode_PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND                  ErrorCode = 119
	ErrorCode_PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX                 ErrorCode = 120
	ErrorCode_PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS     ErrorCode = 121
	ErrorCode_PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND     ErrorCode = 122
	ErrorCode_PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT                    ErrorCode = 123
	ErrorCode_PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP      ErrorCode = 124
	ErrorCode_NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING                  ErrorCode = 125
	ErrorCode_SSL_NOT_SUPPORTED                                            ErrorCode = 126
	ErrorCode_REGISTERED_DOMAIN_HOST_LIMIT_REACHED                         ErrorCode = 127
	ErrorCode_PUBLIC_SUFFIX_LIST_CONTROL_FAILED                            ErrorCode = 128
	ErrorCode_PORT_NOT_SUPPORTED                                           ErrorCode = 129
	ErrorCode_PUBLIC_HTTP_ROUTING_SYNC_RUNNING                             ErrorCode = 130
	ErrorCode_PUBLIC_HTTP_ROUTING_VERSION_MISMATCH                         ErrorCode = 131
	ErrorCode_PORT_OUT_OF_RANGE                                            ErrorCode = 132
	ErrorCode_PORT_PROTOCOL_INVALID                                        ErrorCode = 133
	ErrorCode_PORT_SCHEME_INVALID                                          ErrorCode = 134
	ErrorCode_UDP_PROTOCOL_SCHEME_MISMATCH                                 ErrorCode = 135
	ErrorCode_PUBLIC_IP_REQUEST_NOT_FOUND                                  ErrorCode = 136
	ErrorCode_PUBLIC_IP_REQUEST_ALREADY_EXISTS                             ErrorCode = 137
	ErrorCode_PUBLIC_IP_REQUEST_ONLY_ONE                                   ErrorCode = 138
	ErrorCode_PUBLIC_IP_REQUEST_DISABLED_TILL                              ErrorCode = 139
	ErrorCode_PUBLIC_IP_REQUEST_RELEASE_RUNNING                            ErrorCode = 140
	ErrorCode_USER_NOTIFICATION_NOT_FOUND                                  ErrorCode = 141
	ErrorCode_PUBLIC_PORT_ROUTING_NOT_FOUND                                ErrorCode = 142
	ErrorCode_PUBLIC_IP_TYPE_NOT_SUPPORTED                                 ErrorCode = 143
	ErrorCode_PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED                  ErrorCode = 144
	ErrorCode_PUBLIC_PORT_ROUTING_DUPLICATE_RULE                           ErrorCode = 145
	ErrorCode_INTERNAL_PORT_DUPLICATE_RULE                                 ErrorCode = 146
	ErrorCode_PUBLIC_PORT_ROUTING_SYNC_RUNNING                             ErrorCode = 147
	ErrorCode_PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT                        ErrorCode = 148
	ErrorCode_PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT                 ErrorCode = 149
	ErrorCode_PUBLIC_PORT_ROUTING_VERSION_MISMATCH                         ErrorCode = 150
	ErrorCode_PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD            ErrorCode = 151
	ErrorCode_PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE   ErrorCode = 152
	ErrorCode_DRIVER_NOT_FOUND                                             ErrorCode = 153
	ErrorCode_DRIVER_ENTITY_IS_NOT_SERVICE_STACK                           ErrorCode = 154
	ErrorCode_DRIVER_ALREADY_SET                                           ErrorCode = 155
	ErrorCode_CLIENT_USER_CONNECTION_ALREADY_EXISTS                        ErrorCode = 156
	ErrorCode_USER_ALREADY_ASSIGNED                                        ErrorCode = 157
	ErrorCode_SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED                     ErrorCode = 158
	ErrorCode_APP_VERSION_NOT_FOUND                                        ErrorCode = 159
	ErrorCode_APP_VERSION_INVALID_STATUS                                   ErrorCode = 160
	ErrorCode_DEPLOY_PROCESS_ALREADY_CREATED                               ErrorCode = 161
	ErrorCode_OBJECT_CONTENT_LENGTH_ZERO                                   ErrorCode = 162
	ErrorCode_OBJECT_MIME_TYPE_NOT_SUPPORTED                               ErrorCode = 163
	ErrorCode_OBJECT_NOT_FOUND                                             ErrorCode = 164
	ErrorCode_MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED                       ErrorCode = 165
	ErrorCode_APP_VERSION_IS_ACTIVE                                        ErrorCode = 166
	ErrorCode_APP_VERSION_IS_BEING_DEPLOYED                                ErrorCode = 167
	ErrorCode_APP_VERSION_IS_BEING_BUILT                                   ErrorCode = 168
	ErrorCode_APP_VERSION_IS_NOT_BEING_UPLOADED                            ErrorCode = 169
	ErrorCode_APP_VERSION_DEPLOYING_FAILED                                 ErrorCode = 170
	ErrorCode_APP_VERSION_BUILDING_FAILED                                  ErrorCode = 171
	ErrorCode_APP_VERSION_YAML_PARSE_FAILED                                ErrorCode = 172
	ErrorCode_SHARED_STORAGE_NOT_FOUND                                     ErrorCode = 173
	ErrorCode_SHARED_STORAGE_INVALID_PROJECT                               ErrorCode = 174
	ErrorCode_SERVICE_STACK_CONNECTION_NOT_FOUND                           ErrorCode = 175
	ErrorCode_SHARED_STORAGE_INVALID_CATEGORY                              ErrorCode = 176
	ErrorCode_USER_SERVICE_STACK_INVALID_CATEGORY                          ErrorCode = 177
	ErrorCode_IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK                   ErrorCode = 178
	ErrorCode_CLIENT_ID_PROJECT_SERVICE_STACK_MISSING                      ErrorCode = 179
	ErrorCode_DIFFERENT_PROJECT_IDS                                        ErrorCode = 180
	ErrorCode_STATS_HISTORY_SEARCH_LIMIT_INVALID                           ErrorCode = 181
	ErrorCode_STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID                   ErrorCode = 182
	ErrorCode_STATS_HISTORY_SEARCH_ID_FILTER_INVALID                       ErrorCode = 183
	ErrorCode_STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED                     ErrorCode = 184
	ErrorCode_STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED              ErrorCode = 185
	ErrorCode_STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED                   ErrorCode = 186
	ErrorCode_GITHUB_VERIFICATION_EXPIRED                                  ErrorCode = 187
	ErrorCode_INVALID_GITHUB_TOKEN_ACTION                                  ErrorCode = 188
	ErrorCode_GITHUB_REQUEST_FAILED                                        ErrorCode = 189
	ErrorCode_GITHUB_AUTHORIZATION_REQUIRED                                ErrorCode = 190
	ErrorCode_GITHUB_EMAIL_ACCESS_REQUIRED                                 ErrorCode = 191
	ErrorCode_GITHUB_NO_VERIFIED_EMAIL_FOUND                               ErrorCode = 192
	ErrorCode_GITHUB_REPOSITORY_ACCESS_REQUIRED                            ErrorCode = 193
	ErrorCode_GITHUB_RATE_LIMIT_EXCEEDED                                   ErrorCode = 194
	ErrorCode_SERVICE_STACK_NO_GITHUB_INTEGRATION                          ErrorCode = 195
	ErrorCode_BRANCH_NAME_REQUIRED                                         ErrorCode = 196
	ErrorCode_USER_SERVICE_STACK_REQUIRED                                  ErrorCode = 197
	ErrorCode_NO_EXTERNAL_REPOSITORY_INTEGRATION                           ErrorCode = 198
	ErrorCode_GITHUB_BRANCH_DELETED                                        ErrorCode = 199
	ErrorCode_GITHUB_WEBHOOK_DELETED                                       ErrorCode = 200
	ErrorCode_GITHUB_WEBHOOK_INVALID_PARAMETERS                            ErrorCode = 201
	ErrorCode_UNEXPECTED_GITHUB_FILE_ENCODING                              ErrorCode = 202
	ErrorCode_ZEROPS_BUILD_FILE_NOT_FOUND                                  ErrorCode = 203
	ErrorCode_INCORRECT_WEBHOOK_SECRET                                     ErrorCode = 204
	ErrorCode_UNSUPPORTED_WEBHOOK_EVENT_TYPE                               ErrorCode = 205
	ErrorCode_REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS             ErrorCode = 206
	ErrorCode_PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE                    ErrorCode = 207
	ErrorCode_GITHUB_PUSH_IGNORED                                          ErrorCode = 208
	ErrorCode_ZEROPS_BUILD_FILE_TOO_LARGE                                  ErrorCode = 209
	ErrorCode_SAME_SERVICE_STACK_TYPE_USED                                 ErrorCode = 210
	ErrorCode_GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT                     ErrorCode = 211
	ErrorCode_GITHUB_WEBHOOKS_LIMIT_EXCEEDED                               ErrorCode = 212
	ErrorCode_AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE                           ErrorCode = 213
	ErrorCode_AVATAR_UPLOAD_MAX_SIZE                                       ErrorCode = 214
	ErrorCode_AVATAR_UPLOAD_FILE_NOT_FOUND                                 ErrorCode = 215
	ErrorCode_GITLAB_RATE_LIMIT_EXCEEDED                                   ErrorCode = 216
	ErrorCode_GITLAB_VERIFICATION_EXPIRED                                  ErrorCode = 217
	ErrorCode_INVALID_GITLAB_TOKEN_ACTION                                  ErrorCode = 218
	ErrorCode_GITLAB_REQUEST_FAILED                                        ErrorCode = 219
	ErrorCode_GITLAB_AUTHORIZATION_REQUIRED                                ErrorCode = 220
	ErrorCode_GITLAB_FULL_API_ACCESS_REQUIRED                              ErrorCode = 221
	ErrorCode_MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN                          ErrorCode = 222
	ErrorCode_GITLAB_BRANCH_DELETED                                        ErrorCode = 223
	ErrorCode_GITLAB_WEBHOOK_DELETED                                       ErrorCode = 224
	ErrorCode_GITLAB_WEBHOOK_INVALID_PARAMETERS                            ErrorCode = 225
	ErrorCode_SERVICE_STACK_NO_GITLAB_INTEGRATION                          ErrorCode = 226
	ErrorCode_GITLAB_PUSH_IGNORED                                          ErrorCode = 227
	ErrorCode_USER_ID_WAS_NOT_FOUND                                        ErrorCode = 228
	ErrorCode_AUTHOR_ID_WAS_NOT_FOUND                                      ErrorCode = 229
	ErrorCode_USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT           ErrorCode = 230
	ErrorCode_USER_HAS_NOT_ACCESS_TO_ZEROPS                                ErrorCode = 231
	ErrorCode_INVALID_EMAIL_TOKEN                                          ErrorCode = 232
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "NO_ERROR",
		1:   "INTERNAL_SERVER_ERROR",
		2:   "INVALID_USER_INPUT",
		3:   "INVALID_USER_INPUT_WITH_TEXT",
		4:   "NOT_AUTHORIZED",
		5:   "INSUFFICIENT_PRIVILEGES",
		6:   "REFRESH_TOKEN_INVALID",
		7:   "ENDPOINT_NOT_FOUND",
		8:   "POTENTIALLY_FRAUD_BEHAVIOR_DETECTED",
		9:   "RE_CAPTCHA_RESPONSE_INVALID",
		10:  "DOWNLOAD_TOKEN_INVALID_OR_EXPIRED",
		11:  "INCORRECT_USER_CREDENTIALS",
		12:  "NO_RIGHTS_TO_SELECTED_ACTION",
		13:  "FILE_SIZE_LIMIT_EXCEEDED",
		14:  "ADDITIONAL_VERIFICATION_FAILED",
		15:  "AT_LEAST_ONE_MANAGER",
		16:  "ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT",
		17:  "INVALID_CREDENTIALS",
		18:  "PASSWORD_TOO_WEAK",
		19:  "NO_ACTIVE_CONNECTION_TO_ANY_CLIENT",
		20:  "NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT",
		21:  "TOKEN_EXPIRED",
		22:  "CLIENT_NOT_FOUND",
		23:  "NO_ACCESS_TO_ZEROPS",
		24:  "USER_NOT_FOUND",
		25:  "INVALID_DOCUMENT_ROOT",
		26:  "INVALID_ENTRYPOINT",
		27:  "DOWNLOAD_EXPIRED",
		28:  "USER_DATA_NOT_FOUND",
		29:  "USER_DATA_KEY_INVALID",
		30:  "USER_DATA_CONTENT_INVALID",
		31:  "USER_DATA_USE_OF_SYSTEM_KEY",
		32:  "USER_DATA_DELETE_FORBIDDEN",
		33:  "USER_DATA_DUPLICATE_KEY",
		34:  "USER_DATA_SYNC_RUNNING",
		35:  "USER_DATA_VERSION_MISMATCH",
		36:  "USER_TOKEN_NOT_FOUND",
		37:  "USER_ACCOUNT_NOT_FOUND",
		38:  "TEMPLATE_NOT_FOUND",
		39:  "COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER",
		40:  "INVALID_PHONE_NUMBER",
		41:  "INVALID_USER_ROLE",
		42:  "INVALID_CLIENT_USER_GROUP_COMBINATION",
		43:  "EMAIL_EXISTS",
		44:  "USER_ALREADY_CONNECTED_TO_COMPANY",
		45:  "COUNTRY_NOT_FOUND",
		46:  "RECORD_NOT_FOUND",
		47:  "MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED",
		48:  "USER_IS_NOT_IN_BEING_DELETED_STATUS",
		49:  "UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT",
		50:  "CLIENT_USER_CONNECTION_NOT_FOUND",
		51:  "CLIENT_USER_CONNECTION_HAS_BEEN_DELETED",
		52:  "BAD_OR_EXPIRED_ACTIVATION_LINK",
		53:  "UNABLE_TO_EDIT_DELETED_USER",
		54:  "CLIENT_USER_ALREADY_BEEN_DELETED",
		55:  "LANGUAGE_NOT_FOUND",
		56:  "LANGUAGE_NOT_SUPPORTED",
		57:  "DUPLICATED_USER",
		58:  "RECORD_IS_READ_ONLY",
		59:  "RECORD_IS_DELETED",
		60:  "RECORD_COMMON_KEY_EDIT",
		61:  "IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER",
		62:  "MANUAL_REPAIR_REQUIRED",
		63:  "NOTHING_TO_SYNC",
		64:  "SERVICE_STACK_NOT_FOUND",
		65:  "SERVICE_STACK_TYPE_NOT_FOUND",
		66:  "SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		67:  "SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE",
		68:  "SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT",
		69:  "SERVICE_STACK_TYPE_INVALID_VERSION",
		70:  "SERVICE_STACK_IS_FAILED",
		71:  "SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED",
		72:  "SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED",
		73:  "SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE",
		74:  "SERVICE_STACK_STORAGE_DISK_MAX_LIMIT",
		75:  "SERVICE_STACK_STORAGE_DISK_MIN_LIMIT",
		76:  "SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND",
		77:  "SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED",
		78:  "SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN",
		79:  "SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN",
		80:  "SERVICE_STACK_IS_READY_TO_DEPLOY",
		81:  "SERVICE_STACK_IS_NOT_HTTP",
		82:  "SERVICE_STACK_RELOAD_NOT_AVAILABLE",
		83:  "SERVICE_STACK_NGINX_CONFIG",
		84:  "SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED",
		85:  "SERVICE_STACK_CREATING",
		86:  "SERVICE_STACK_UPGRADING",
		87:  "SERVICE_STACK_INVALID_CATEGORY",
		88:  "PROCESS_NOT_FOUND",
		89:  "PROCESS_IS_ALREADY_OVER",
		90:  "PROCESS_IS_ALREADY_CANCELED",
		91:  "PROCESS_IS_ALREADY_RUNNING",
		92:  "UNABLE_TO_CANCEL_PROCESS",
		93:  "UNABLE_TO_CREATE_PROCESS",
		94:  "PROCESS_WRONG_STATE",
		95:  "PROCESS_WRONG_SERVICE_STACK_TYPE",
		96:  "ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT",
		97:  "INVALID_OLD_PASSWORD",
		98:  "PROJECT_STATUS_NOT_SUPPORTED",
		99:  "PROJECT_NOT_FOUND",
		100: "PROJECT_IS_NOT_ACTIVE",
		101: "SERVICE_STACK_NAME_UNAVAILABLE",
		102: "SERVICE_STACK_NAME_INVALID",
		103: "CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		104: "L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		105: "PROJECT_WILL_BE_DELETED",
		106: "STACK_WILL_BE_DELETED",
		107: "PUBLIC_HTTP_ROUTING_NOT_FOUND",
		108: "PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED",
		109: "PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME",
		110: "PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK",
		111: "PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING",
		112: "PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING",
		113: "PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS",
		114: "PUBLIC_HTTP_ROUTING_ITEMS_LIMIT",
		115: "PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT",
		116: "PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT",
		117: "PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN",
		118: "PUBLIC_HTTP_ROUTING_SSL_FALLBACK",
		119: "PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND",
		120: "PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX",
		121: "PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS",
		122: "PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND",
		123: "PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT",
		124: "PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP",
		125: "NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING",
		126: "SSL_NOT_SUPPORTED",
		127: "REGISTERED_DOMAIN_HOST_LIMIT_REACHED",
		128: "PUBLIC_SUFFIX_LIST_CONTROL_FAILED",
		129: "PORT_NOT_SUPPORTED",
		130: "PUBLIC_HTTP_ROUTING_SYNC_RUNNING",
		131: "PUBLIC_HTTP_ROUTING_VERSION_MISMATCH",
		132: "PORT_OUT_OF_RANGE",
		133: "PORT_PROTOCOL_INVALID",
		134: "PORT_SCHEME_INVALID",
		135: "UDP_PROTOCOL_SCHEME_MISMATCH",
		136: "PUBLIC_IP_REQUEST_NOT_FOUND",
		137: "PUBLIC_IP_REQUEST_ALREADY_EXISTS",
		138: "PUBLIC_IP_REQUEST_ONLY_ONE",
		139: "PUBLIC_IP_REQUEST_DISABLED_TILL",
		140: "PUBLIC_IP_REQUEST_RELEASE_RUNNING",
		141: "USER_NOTIFICATION_NOT_FOUND",
		142: "PUBLIC_PORT_ROUTING_NOT_FOUND",
		143: "PUBLIC_IP_TYPE_NOT_SUPPORTED",
		144: "PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED",
		145: "PUBLIC_PORT_ROUTING_DUPLICATE_RULE",
		146: "INTERNAL_PORT_DUPLICATE_RULE",
		147: "PUBLIC_PORT_ROUTING_SYNC_RUNNING",
		148: "PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT",
		149: "PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT",
		150: "PUBLIC_PORT_ROUTING_VERSION_MISMATCH",
		151: "PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD",
		152: "PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE",
		153: "DRIVER_NOT_FOUND",
		154: "DRIVER_ENTITY_IS_NOT_SERVICE_STACK",
		155: "DRIVER_ALREADY_SET",
		156: "CLIENT_USER_CONNECTION_ALREADY_EXISTS",
		157: "USER_ALREADY_ASSIGNED",
		158: "SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED",
		159: "APP_VERSION_NOT_FOUND",
		160: "APP_VERSION_INVALID_STATUS",
		161: "DEPLOY_PROCESS_ALREADY_CREATED",
		162: "OBJECT_CONTENT_LENGTH_ZERO",
		163: "OBJECT_MIME_TYPE_NOT_SUPPORTED",
		164: "OBJECT_NOT_FOUND",
		165: "MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED",
		166: "APP_VERSION_IS_ACTIVE",
		167: "APP_VERSION_IS_BEING_DEPLOYED",
		168: "APP_VERSION_IS_BEING_BUILT",
		169: "APP_VERSION_IS_NOT_BEING_UPLOADED",
		170: "APP_VERSION_DEPLOYING_FAILED",
		171: "APP_VERSION_BUILDING_FAILED",
		172: "APP_VERSION_YAML_PARSE_FAILED",
		173: "SHARED_STORAGE_NOT_FOUND",
		174: "SHARED_STORAGE_INVALID_PROJECT",
		175: "SERVICE_STACK_CONNECTION_NOT_FOUND",
		176: "SHARED_STORAGE_INVALID_CATEGORY",
		177: "USER_SERVICE_STACK_INVALID_CATEGORY",
		178: "IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK",
		179: "CLIENT_ID_PROJECT_SERVICE_STACK_MISSING",
		180: "DIFFERENT_PROJECT_IDS",
		181: "STATS_HISTORY_SEARCH_LIMIT_INVALID",
		182: "STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID",
		183: "STATS_HISTORY_SEARCH_ID_FILTER_INVALID",
		184: "STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED",
		185: "STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED",
		186: "STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED",
		187: "GITHUB_VERIFICATION_EXPIRED",
		188: "INVALID_GITHUB_TOKEN_ACTION",
		189: "GITHUB_REQUEST_FAILED",
		190: "GITHUB_AUTHORIZATION_REQUIRED",
		191: "GITHUB_EMAIL_ACCESS_REQUIRED",
		192: "GITHUB_NO_VERIFIED_EMAIL_FOUND",
		193: "GITHUB_REPOSITORY_ACCESS_REQUIRED",
		194: "GITHUB_RATE_LIMIT_EXCEEDED",
		195: "SERVICE_STACK_NO_GITHUB_INTEGRATION",
		196: "BRANCH_NAME_REQUIRED",
		197: "USER_SERVICE_STACK_REQUIRED",
		198: "NO_EXTERNAL_REPOSITORY_INTEGRATION",
		199: "GITHUB_BRANCH_DELETED",
		200: "GITHUB_WEBHOOK_DELETED",
		201: "GITHUB_WEBHOOK_INVALID_PARAMETERS",
		202: "UNEXPECTED_GITHUB_FILE_ENCODING",
		203: "ZEROPS_BUILD_FILE_NOT_FOUND",
		204: "INCORRECT_WEBHOOK_SECRET",
		205: "UNSUPPORTED_WEBHOOK_EVENT_TYPE",
		206: "REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS",
		207: "PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE",
		208: "GITHUB_PUSH_IGNORED",
		209: "ZEROPS_BUILD_FILE_TOO_LARGE",
		210: "SAME_SERVICE_STACK_TYPE_USED",
		211: "GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT",
		212: "GITHUB_WEBHOOKS_LIMIT_EXCEEDED",
		213: "AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE",
		214: "AVATAR_UPLOAD_MAX_SIZE",
		215: "AVATAR_UPLOAD_FILE_NOT_FOUND",
		216: "GITLAB_RATE_LIMIT_EXCEEDED",
		217: "GITLAB_VERIFICATION_EXPIRED",
		218: "INVALID_GITLAB_TOKEN_ACTION",
		219: "GITLAB_REQUEST_FAILED",
		220: "GITLAB_AUTHORIZATION_REQUIRED",
		221: "GITLAB_FULL_API_ACCESS_REQUIRED",
		222: "MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN",
		223: "GITLAB_BRANCH_DELETED",
		224: "GITLAB_WEBHOOK_DELETED",
		225: "GITLAB_WEBHOOK_INVALID_PARAMETERS",
		226: "SERVICE_STACK_NO_GITLAB_INTEGRATION",
		227: "GITLAB_PUSH_IGNORED",
		228: "USER_ID_WAS_NOT_FOUND",
		229: "AUTHOR_ID_WAS_NOT_FOUND",
		230: "USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT",
		231: "USER_HAS_NOT_ACCESS_TO_ZEROPS",
		232: "INVALID_EMAIL_TOKEN",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":                                                     0,
		"INTERNAL_SERVER_ERROR":                                        1,
		"INVALID_USER_INPUT":                                           2,
		"INVALID_USER_INPUT_WITH_TEXT":                                 3,
		"NOT_AUTHORIZED":                                               4,
		"INSUFFICIENT_PRIVILEGES":                                      5,
		"REFRESH_TOKEN_INVALID":                                        6,
		"ENDPOINT_NOT_FOUND":                                           7,
		"POTENTIALLY_FRAUD_BEHAVIOR_DETECTED":                          8,
		"RE_CAPTCHA_RESPONSE_INVALID":                                  9,
		"DOWNLOAD_TOKEN_INVALID_OR_EXPIRED":                            10,
		"INCORRECT_USER_CREDENTIALS":                                   11,
		"NO_RIGHTS_TO_SELECTED_ACTION":                                 12,
		"FILE_SIZE_LIMIT_EXCEEDED":                                     13,
		"ADDITIONAL_VERIFICATION_FAILED":                               14,
		"AT_LEAST_ONE_MANAGER":                                         15,
		"ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT":         16,
		"INVALID_CREDENTIALS":                                          17,
		"PASSWORD_TOO_WEAK":                                            18,
		"NO_ACTIVE_CONNECTION_TO_ANY_CLIENT":                           19,
		"NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT":                       20,
		"TOKEN_EXPIRED":                                                21,
		"CLIENT_NOT_FOUND":                                             22,
		"NO_ACCESS_TO_ZEROPS":                                          23,
		"USER_NOT_FOUND":                                               24,
		"INVALID_DOCUMENT_ROOT":                                        25,
		"INVALID_ENTRYPOINT":                                           26,
		"DOWNLOAD_EXPIRED":                                             27,
		"USER_DATA_NOT_FOUND":                                          28,
		"USER_DATA_KEY_INVALID":                                        29,
		"USER_DATA_CONTENT_INVALID":                                    30,
		"USER_DATA_USE_OF_SYSTEM_KEY":                                  31,
		"USER_DATA_DELETE_FORBIDDEN":                                   32,
		"USER_DATA_DUPLICATE_KEY":                                      33,
		"USER_DATA_SYNC_RUNNING":                                       34,
		"USER_DATA_VERSION_MISMATCH":                                   35,
		"USER_TOKEN_NOT_FOUND":                                         36,
		"USER_ACCOUNT_NOT_FOUND":                                       37,
		"TEMPLATE_NOT_FOUND":                                           38,
		"COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER":             39,
		"INVALID_PHONE_NUMBER":                                         40,
		"INVALID_USER_ROLE":                                            41,
		"INVALID_CLIENT_USER_GROUP_COMBINATION":                        42,
		"EMAIL_EXISTS":                                                 43,
		"USER_ALREADY_CONNECTED_TO_COMPANY":                            44,
		"COUNTRY_NOT_FOUND":                                            45,
		"RECORD_NOT_FOUND":                                             46,
		"MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED":                            47,
		"USER_IS_NOT_IN_BEING_DELETED_STATUS":                          48,
		"UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT":                            49,
		"CLIENT_USER_CONNECTION_NOT_FOUND":                             50,
		"CLIENT_USER_CONNECTION_HAS_BEEN_DELETED":                      51,
		"BAD_OR_EXPIRED_ACTIVATION_LINK":                               52,
		"UNABLE_TO_EDIT_DELETED_USER":                                  53,
		"CLIENT_USER_ALREADY_BEEN_DELETED":                             54,
		"LANGUAGE_NOT_FOUND":                                           55,
		"LANGUAGE_NOT_SUPPORTED":                                       56,
		"DUPLICATED_USER":                                              57,
		"RECORD_IS_READ_ONLY":                                          58,
		"RECORD_IS_DELETED":                                            59,
		"RECORD_COMMON_KEY_EDIT":                                       60,
		"IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER":                         61,
		"MANUAL_REPAIR_REQUIRED":                                       62,
		"NOTHING_TO_SYNC":                                              63,
		"SERVICE_STACK_NOT_FOUND":                                      64,
		"SERVICE_STACK_TYPE_NOT_FOUND":                                 65,
		"SERVICE_STACK_TYPE_VERSION_NOT_FOUND":                         66,
		"SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE":                     67,
		"SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT":                    68,
		"SERVICE_STACK_TYPE_INVALID_VERSION":                           69,
		"SERVICE_STACK_IS_FAILED":                                      70,
		"SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED":                        71,
		"SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED":                  72,
		"SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE":         73,
		"SERVICE_STACK_STORAGE_DISK_MAX_LIMIT":                         74,
		"SERVICE_STACK_STORAGE_DISK_MIN_LIMIT":                         75,
		"SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND":                 76,
		"SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED":                   77,
		"SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN":                  78,
		"SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN":                  79,
		"SERVICE_STACK_IS_READY_TO_DEPLOY":                             80,
		"SERVICE_STACK_IS_NOT_HTTP":                                    81,
		"SERVICE_STACK_RELOAD_NOT_AVAILABLE":                           82,
		"SERVICE_STACK_NGINX_CONFIG":                                   83,
		"SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED":              84,
		"SERVICE_STACK_CREATING":                                       85,
		"SERVICE_STACK_UPGRADING":                                      86,
		"SERVICE_STACK_INVALID_CATEGORY":                               87,
		"PROCESS_NOT_FOUND":                                            88,
		"PROCESS_IS_ALREADY_OVER":                                      89,
		"PROCESS_IS_ALREADY_CANCELED":                                  90,
		"PROCESS_IS_ALREADY_RUNNING":                                   91,
		"UNABLE_TO_CANCEL_PROCESS":                                     92,
		"UNABLE_TO_CREATE_PROCESS":                                     93,
		"PROCESS_WRONG_STATE":                                          94,
		"PROCESS_WRONG_SERVICE_STACK_TYPE":                             95,
		"ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT":                       96,
		"INVALID_OLD_PASSWORD":                                         97,
		"PROJECT_STATUS_NOT_SUPPORTED":                                 98,
		"PROJECT_NOT_FOUND":                                            99,
		"PROJECT_IS_NOT_ACTIVE":                                        100,
		"SERVICE_STACK_NAME_UNAVAILABLE":                               101,
		"SERVICE_STACK_NAME_INVALID":                                   102,
		"CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND":                    103,
		"L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND":        104,
		"PROJECT_WILL_BE_DELETED":                                      105,
		"STACK_WILL_BE_DELETED":                                        106,
		"PUBLIC_HTTP_ROUTING_NOT_FOUND":                                107,
		"PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED":             108,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME":                    109,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK":                       110,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING": 111,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING":    112,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS":                 113,
		"PUBLIC_HTTP_ROUTING_ITEMS_LIMIT":                              114,
		"PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT":                          115,
		"PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT":                            116,
		"PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN":                 117,
		"PUBLIC_HTTP_ROUTING_SSL_FALLBACK":                             118,
		"PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND":                  119,
		"PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX":                 120,
		"PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS":     121,
		"PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND":     122,
		"PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT":                    123,
		"PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP":      124,
		"NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING":                  125,
		"SSL_NOT_SUPPORTED":                                            126,
		"REGISTERED_DOMAIN_HOST_LIMIT_REACHED":                         127,
		"PUBLIC_SUFFIX_LIST_CONTROL_FAILED":                            128,
		"PORT_NOT_SUPPORTED":                                           129,
		"PUBLIC_HTTP_ROUTING_SYNC_RUNNING":                             130,
		"PUBLIC_HTTP_ROUTING_VERSION_MISMATCH":                         131,
		"PORT_OUT_OF_RANGE":                                            132,
		"PORT_PROTOCOL_INVALID":                                        133,
		"PORT_SCHEME_INVALID":                                          134,
		"UDP_PROTOCOL_SCHEME_MISMATCH":                                 135,
		"PUBLIC_IP_REQUEST_NOT_FOUND":                                  136,
		"PUBLIC_IP_REQUEST_ALREADY_EXISTS":                             137,
		"PUBLIC_IP_REQUEST_ONLY_ONE":                                   138,
		"PUBLIC_IP_REQUEST_DISABLED_TILL":                              139,
		"PUBLIC_IP_REQUEST_RELEASE_RUNNING":                            140,
		"USER_NOTIFICATION_NOT_FOUND":                                  141,
		"PUBLIC_PORT_ROUTING_NOT_FOUND":                                142,
		"PUBLIC_IP_TYPE_NOT_SUPPORTED":                                 143,
		"PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED":                  144,
		"PUBLIC_PORT_ROUTING_DUPLICATE_RULE":                           145,
		"INTERNAL_PORT_DUPLICATE_RULE":                                 146,
		"PUBLIC_PORT_ROUTING_SYNC_RUNNING":                             147,
		"PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT":                        148,
		"PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT":                 149,
		"PUBLIC_PORT_ROUTING_VERSION_MISMATCH":                         150,
		"PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD":            151,
		"PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE":   152,
		"DRIVER_NOT_FOUND":                                             153,
		"DRIVER_ENTITY_IS_NOT_SERVICE_STACK":                           154,
		"DRIVER_ALREADY_SET":                                           155,
		"CLIENT_USER_CONNECTION_ALREADY_EXISTS":                        156,
		"USER_ALREADY_ASSIGNED":                                        157,
		"SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED":                     158,
		"APP_VERSION_NOT_FOUND":                                        159,
		"APP_VERSION_INVALID_STATUS":                                   160,
		"DEPLOY_PROCESS_ALREADY_CREATED":                               161,
		"OBJECT_CONTENT_LENGTH_ZERO":                                   162,
		"OBJECT_MIME_TYPE_NOT_SUPPORTED":                               163,
		"OBJECT_NOT_FOUND":                                             164,
		"MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED":                       165,
		"APP_VERSION_IS_ACTIVE":                                        166,
		"APP_VERSION_IS_BEING_DEPLOYED":                                167,
		"APP_VERSION_IS_BEING_BUILT":                                   168,
		"APP_VERSION_IS_NOT_BEING_UPLOADED":                            169,
		"APP_VERSION_DEPLOYING_FAILED":                                 170,
		"APP_VERSION_BUILDING_FAILED":                                  171,
		"APP_VERSION_YAML_PARSE_FAILED":                                172,
		"SHARED_STORAGE_NOT_FOUND":                                     173,
		"SHARED_STORAGE_INVALID_PROJECT":                               174,
		"SERVICE_STACK_CONNECTION_NOT_FOUND":                           175,
		"SHARED_STORAGE_INVALID_CATEGORY":                              176,
		"USER_SERVICE_STACK_INVALID_CATEGORY":                          177,
		"IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK":                   178,
		"CLIENT_ID_PROJECT_SERVICE_STACK_MISSING":                      179,
		"DIFFERENT_PROJECT_IDS":                                        180,
		"STATS_HISTORY_SEARCH_LIMIT_INVALID":                           181,
		"STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID":                   182,
		"STATS_HISTORY_SEARCH_ID_FILTER_INVALID":                       183,
		"STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED":                     184,
		"STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED":              185,
		"STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED":                   186,
		"GITHUB_VERIFICATION_EXPIRED":                                  187,
		"INVALID_GITHUB_TOKEN_ACTION":                                  188,
		"GITHUB_REQUEST_FAILED":                                        189,
		"GITHUB_AUTHORIZATION_REQUIRED":                                190,
		"GITHUB_EMAIL_ACCESS_REQUIRED":                                 191,
		"GITHUB_NO_VERIFIED_EMAIL_FOUND":                               192,
		"GITHUB_REPOSITORY_ACCESS_REQUIRED":                            193,
		"GITHUB_RATE_LIMIT_EXCEEDED":                                   194,
		"SERVICE_STACK_NO_GITHUB_INTEGRATION":                          195,
		"BRANCH_NAME_REQUIRED":                                         196,
		"USER_SERVICE_STACK_REQUIRED":                                  197,
		"NO_EXTERNAL_REPOSITORY_INTEGRATION":                           198,
		"GITHUB_BRANCH_DELETED":                                        199,
		"GITHUB_WEBHOOK_DELETED":                                       200,
		"GITHUB_WEBHOOK_INVALID_PARAMETERS":                            201,
		"UNEXPECTED_GITHUB_FILE_ENCODING":                              202,
		"ZEROPS_BUILD_FILE_NOT_FOUND":                                  203,
		"INCORRECT_WEBHOOK_SECRET":                                     204,
		"UNSUPPORTED_WEBHOOK_EVENT_TYPE":                               205,
		"REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS":             206,
		"PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE":                    207,
		"GITHUB_PUSH_IGNORED":                                          208,
		"ZEROPS_BUILD_FILE_TOO_LARGE":                                  209,
		"SAME_SERVICE_STACK_TYPE_USED":                                 210,
		"GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT":                     211,
		"GITHUB_WEBHOOKS_LIMIT_EXCEEDED":                               212,
		"AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE":                           213,
		"AVATAR_UPLOAD_MAX_SIZE":                                       214,
		"AVATAR_UPLOAD_FILE_NOT_FOUND":                                 215,
		"GITLAB_RATE_LIMIT_EXCEEDED":                                   216,
		"GITLAB_VERIFICATION_EXPIRED":                                  217,
		"INVALID_GITLAB_TOKEN_ACTION":                                  218,
		"GITLAB_REQUEST_FAILED":                                        219,
		"GITLAB_AUTHORIZATION_REQUIRED":                                220,
		"GITLAB_FULL_API_ACCESS_REQUIRED":                              221,
		"MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN":                          222,
		"GITLAB_BRANCH_DELETED":                                        223,
		"GITLAB_WEBHOOK_DELETED":                                       224,
		"GITLAB_WEBHOOK_INVALID_PARAMETERS":                            225,
		"SERVICE_STACK_NO_GITLAB_INTEGRATION":                          226,
		"GITLAB_PUSH_IGNORED":                                          227,
		"USER_ID_WAS_NOT_FOUND":                                        228,
		"AUTHOR_ID_WAS_NOT_FOUND":                                      229,
		"USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT":           230,
		"USER_HAS_NOT_ACCESS_TO_ZEROPS":                                231,
		"INVALID_EMAIL_TOKEN":                                          232,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{0}
}

type AppVersionGithubIntegrationEventType int32

const (
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN AppVersionGithubIntegrationEventType = 0
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH  AppVersionGithubIntegrationEventType = 1
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG     AppVersionGithubIntegrationEventType = 2
)

// Enum value maps for AppVersionGithubIntegrationEventType.
var (
	AppVersionGithubIntegrationEventType_name = map[int32]string{
		0: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG",
	}
	AppVersionGithubIntegrationEventType_value = map[string]int32{
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x AppVersionGithubIntegrationEventType) Enum() *AppVersionGithubIntegrationEventType {
	p := new(AppVersionGithubIntegrationEventType)
	*p = x
	return p
}

func (x AppVersionGithubIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionGithubIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[1].Descriptor()
}

func (AppVersionGithubIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[1]
}

func (x AppVersionGithubIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionGithubIntegrationEventType.Descriptor instead.
func (AppVersionGithubIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{1}
}

type AppVersionGitlabIntegrationEventType int32

const (
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN AppVersionGitlabIntegrationEventType = 0
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH  AppVersionGitlabIntegrationEventType = 1
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG     AppVersionGitlabIntegrationEventType = 2
)

// Enum value maps for AppVersionGitlabIntegrationEventType.
var (
	AppVersionGitlabIntegrationEventType_name = map[int32]string{
		0: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG",
	}
	AppVersionGitlabIntegrationEventType_value = map[string]int32{
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x AppVersionGitlabIntegrationEventType) Enum() *AppVersionGitlabIntegrationEventType {
	p := new(AppVersionGitlabIntegrationEventType)
	*p = x
	return p
}

func (x AppVersionGitlabIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionGitlabIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[2].Descriptor()
}

func (AppVersionGitlabIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[2]
}

func (x AppVersionGitlabIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionGitlabIntegrationEventType.Descriptor instead.
func (AppVersionGitlabIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{2}
}

type AppVersionSource int32

const (
	AppVersionSource_APP_VERSION_SOURCE_UNKNOWN AppVersionSource = 0
	AppVersionSource_APP_VERSION_SOURCE_CLI     AppVersionSource = 1
	AppVersionSource_APP_VERSION_SOURCE_GUI     AppVersionSource = 2
	AppVersionSource_APP_VERSION_SOURCE_GITHUB  AppVersionSource = 3
	AppVersionSource_APP_VERSION_SOURCE_GITLAB  AppVersionSource = 4
)

// Enum value maps for AppVersionSource.
var (
	AppVersionSource_name = map[int32]string{
		0: "APP_VERSION_SOURCE_UNKNOWN",
		1: "APP_VERSION_SOURCE_CLI",
		2: "APP_VERSION_SOURCE_GUI",
		3: "APP_VERSION_SOURCE_GITHUB",
		4: "APP_VERSION_SOURCE_GITLAB",
	}
	AppVersionSource_value = map[string]int32{
		"APP_VERSION_SOURCE_UNKNOWN": 0,
		"APP_VERSION_SOURCE_CLI":     1,
		"APP_VERSION_SOURCE_GUI":     2,
		"APP_VERSION_SOURCE_GITHUB":  3,
		"APP_VERSION_SOURCE_GITLAB":  4,
	}
)

func (x AppVersionSource) Enum() *AppVersionSource {
	p := new(AppVersionSource)
	*p = x
	return p
}

func (x AppVersionSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionSource) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[3].Descriptor()
}

func (AppVersionSource) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[3]
}

func (x AppVersionSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionSource.Descriptor instead.
func (AppVersionSource) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{3}
}

type AppVersionStatus int32

const (
	AppVersionStatus_APP_VERSION_STATUS_UNKNOWN           AppVersionStatus = 0
	AppVersionStatus_APP_VERSION_STATUS_UPLOADING         AppVersionStatus = 1
	AppVersionStatus_APP_VERSION_STATUS_WAITING_TO_DEPLOY AppVersionStatus = 2
	AppVersionStatus_APP_VERSION_STATUS_DEPLOYING         AppVersionStatus = 3
	AppVersionStatus_APP_VERSION_STATUS_DEPLOY_FAILED     AppVersionStatus = 4
	AppVersionStatus_APP_VERSION_STATUS_ACTIVE            AppVersionStatus = 5
	AppVersionStatus_APP_VERSION_STATUS_BACKUP            AppVersionStatus = 6
	AppVersionStatus_APP_VERSION_STATUS_BUILDING          AppVersionStatus = 7
	AppVersionStatus_APP_VERSION_STATUS_WAITING_TO_BUILD  AppVersionStatus = 8
	AppVersionStatus_APP_VERSION_STATUS_BUILD_FAILED      AppVersionStatus = 9
)

// Enum value maps for AppVersionStatus.
var (
	AppVersionStatus_name = map[int32]string{
		0: "APP_VERSION_STATUS_UNKNOWN",
		1: "APP_VERSION_STATUS_UPLOADING",
		2: "APP_VERSION_STATUS_WAITING_TO_DEPLOY",
		3: "APP_VERSION_STATUS_DEPLOYING",
		4: "APP_VERSION_STATUS_DEPLOY_FAILED",
		5: "APP_VERSION_STATUS_ACTIVE",
		6: "APP_VERSION_STATUS_BACKUP",
		7: "APP_VERSION_STATUS_BUILDING",
		8: "APP_VERSION_STATUS_WAITING_TO_BUILD",
		9: "APP_VERSION_STATUS_BUILD_FAILED",
	}
	AppVersionStatus_value = map[string]int32{
		"APP_VERSION_STATUS_UNKNOWN":           0,
		"APP_VERSION_STATUS_UPLOADING":         1,
		"APP_VERSION_STATUS_WAITING_TO_DEPLOY": 2,
		"APP_VERSION_STATUS_DEPLOYING":         3,
		"APP_VERSION_STATUS_DEPLOY_FAILED":     4,
		"APP_VERSION_STATUS_ACTIVE":            5,
		"APP_VERSION_STATUS_BACKUP":            6,
		"APP_VERSION_STATUS_BUILDING":          7,
		"APP_VERSION_STATUS_WAITING_TO_BUILD":  8,
		"APP_VERSION_STATUS_BUILD_FAILED":      9,
	}
)

func (x AppVersionStatus) Enum() *AppVersionStatus {
	p := new(AppVersionStatus)
	*p = x
	return p
}

func (x AppVersionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[4].Descriptor()
}

func (AppVersionStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[4]
}

func (x AppVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionStatus.Descriptor instead.
func (AppVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{4}
}

type ClientUserLightRoleCode int32

const (
	ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN ClientUserLightRoleCode = 0
	ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_MANAGER ClientUserLightRoleCode = 1
)

// Enum value maps for ClientUserLightRoleCode.
var (
	ClientUserLightRoleCode_name = map[int32]string{
		0: "CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN",
		1: "CLIENT_USER_LIGHT_ROLE_CODE_MANAGER",
	}
	ClientUserLightRoleCode_value = map[string]int32{
		"CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN": 0,
		"CLIENT_USER_LIGHT_ROLE_CODE_MANAGER": 1,
	}
)

func (x ClientUserLightRoleCode) Enum() *ClientUserLightRoleCode {
	p := new(ClientUserLightRoleCode)
	*p = x
	return p
}

func (x ClientUserLightRoleCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientUserLightRoleCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[5].Descriptor()
}

func (ClientUserLightRoleCode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[5]
}

func (x ClientUserLightRoleCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientUserLightRoleCode.Descriptor instead.
func (ClientUserLightRoleCode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{5}
}

type ClientUserLightStatus int32

const (
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_UNKNOWN               ClientUserLightStatus = 0
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_ACTIVE                ClientUserLightStatus = 1
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION ClientUserLightStatus = 2
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_BEING_DELETED         ClientUserLightStatus = 3
)

// Enum value maps for ClientUserLightStatus.
var (
	ClientUserLightStatus_name = map[int32]string{
		0: "CLIENT_USER_LIGHT_STATUS_UNKNOWN",
		1: "CLIENT_USER_LIGHT_STATUS_ACTIVE",
		2: "CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION",
		3: "CLIENT_USER_LIGHT_STATUS_BEING_DELETED",
	}
	ClientUserLightStatus_value = map[string]int32{
		"CLIENT_USER_LIGHT_STATUS_UNKNOWN":               0,
		"CLIENT_USER_LIGHT_STATUS_ACTIVE":                1,
		"CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION": 2,
		"CLIENT_USER_LIGHT_STATUS_BEING_DELETED":         3,
	}
)

func (x ClientUserLightStatus) Enum() *ClientUserLightStatus {
	p := new(ClientUserLightStatus)
	*p = x
	return p
}

func (x ClientUserLightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientUserLightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[6].Descriptor()
}

func (ClientUserLightStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[6]
}

func (x ClientUserLightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientUserLightStatus.Descriptor instead.
func (ClientUserLightStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{6}
}

type GithubIntegrationEventType int32

const (
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN GithubIntegrationEventType = 0
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH  GithubIntegrationEventType = 1
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_TAG     GithubIntegrationEventType = 2
)

// Enum value maps for GithubIntegrationEventType.
var (
	GithubIntegrationEventType_name = map[int32]string{
		0: "GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "GITHUB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "GITHUB_INTEGRATION_EVENT_TYPE_TAG",
	}
	GithubIntegrationEventType_value = map[string]int32{
		"GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"GITHUB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"GITHUB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x GithubIntegrationEventType) Enum() *GithubIntegrationEventType {
	p := new(GithubIntegrationEventType)
	*p = x
	return p
}

func (x GithubIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GithubIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[7].Descriptor()
}

func (GithubIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[7]
}

func (x GithubIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GithubIntegrationEventType.Descriptor instead.
func (GithubIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{7}
}

type GitlabIntegrationEventType int32

const (
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN GitlabIntegrationEventType = 0
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH  GitlabIntegrationEventType = 1
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_TAG     GitlabIntegrationEventType = 2
)

// Enum value maps for GitlabIntegrationEventType.
var (
	GitlabIntegrationEventType_name = map[int32]string{
		0: "GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "GITLAB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "GITLAB_INTEGRATION_EVENT_TYPE_TAG",
	}
	GitlabIntegrationEventType_value = map[string]int32{
		"GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"GITLAB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"GITLAB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x GitlabIntegrationEventType) Enum() *GitlabIntegrationEventType {
	p := new(GitlabIntegrationEventType)
	*p = x
	return p
}

func (x GitlabIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitlabIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[8].Descriptor()
}

func (GitlabIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[8]
}

func (x GitlabIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitlabIntegrationEventType.Descriptor instead.
func (GitlabIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{8}
}

type ProcessStatus int32

const (
	ProcessStatus_PROCESS_STATUS_UNKNOWN     ProcessStatus = 0
	ProcessStatus_PROCESS_STATUS_PENDING     ProcessStatus = 1
	ProcessStatus_PROCESS_STATUS_RUNNING     ProcessStatus = 2
	ProcessStatus_PROCESS_STATUS_ROLLBACKING ProcessStatus = 3
	ProcessStatus_PROCESS_STATUS_CANCELING   ProcessStatus = 4
	ProcessStatus_PROCESS_STATUS_FINISHED    ProcessStatus = 5
	ProcessStatus_PROCESS_STATUS_FAILED      ProcessStatus = 6
	ProcessStatus_PROCESS_STATUS_CANCELED    ProcessStatus = 7
	ProcessStatus_PROCESS_STATUS_DELETED     ProcessStatus = 8
)

// Enum value maps for ProcessStatus.
var (
	ProcessStatus_name = map[int32]string{
		0: "PROCESS_STATUS_UNKNOWN",
		1: "PROCESS_STATUS_PENDING",
		2: "PROCESS_STATUS_RUNNING",
		3: "PROCESS_STATUS_ROLLBACKING",
		4: "PROCESS_STATUS_CANCELING",
		5: "PROCESS_STATUS_FINISHED",
		6: "PROCESS_STATUS_FAILED",
		7: "PROCESS_STATUS_CANCELED",
		8: "PROCESS_STATUS_DELETED",
	}
	ProcessStatus_value = map[string]int32{
		"PROCESS_STATUS_UNKNOWN":     0,
		"PROCESS_STATUS_PENDING":     1,
		"PROCESS_STATUS_RUNNING":     2,
		"PROCESS_STATUS_ROLLBACKING": 3,
		"PROCESS_STATUS_CANCELING":   4,
		"PROCESS_STATUS_FINISHED":    5,
		"PROCESS_STATUS_FAILED":      6,
		"PROCESS_STATUS_CANCELED":    7,
		"PROCESS_STATUS_DELETED":     8,
	}
)

func (x ProcessStatus) Enum() *ProcessStatus {
	p := new(ProcessStatus)
	*p = x
	return p
}

func (x ProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[9].Descriptor()
}

func (ProcessStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[9]
}

func (x ProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStatus.Descriptor instead.
func (ProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{9}
}

type ProjectStatus int32

const (
	ProjectStatus_PROJECT_STATUS_UNKNOWN  ProjectStatus = 0
	ProjectStatus_PROJECT_STATUS_NEW      ProjectStatus = 1
	ProjectStatus_PROJECT_STATUS_CREATING ProjectStatus = 2
	ProjectStatus_PROJECT_STATUS_ACTIVE   ProjectStatus = 3
	ProjectStatus_PROJECT_STATUS_DELETING ProjectStatus = 4
	ProjectStatus_PROJECT_STATUS_FAILED   ProjectStatus = 5
)

// Enum value maps for ProjectStatus.
var (
	ProjectStatus_name = map[int32]string{
		0: "PROJECT_STATUS_UNKNOWN",
		1: "PROJECT_STATUS_NEW",
		2: "PROJECT_STATUS_CREATING",
		3: "PROJECT_STATUS_ACTIVE",
		4: "PROJECT_STATUS_DELETING",
		5: "PROJECT_STATUS_FAILED",
	}
	ProjectStatus_value = map[string]int32{
		"PROJECT_STATUS_UNKNOWN":  0,
		"PROJECT_STATUS_NEW":      1,
		"PROJECT_STATUS_CREATING": 2,
		"PROJECT_STATUS_ACTIVE":   3,
		"PROJECT_STATUS_DELETING": 4,
		"PROJECT_STATUS_FAILED":   5,
	}
)

func (x ProjectStatus) Enum() *ProjectStatus {
	p := new(ProjectStatus)
	*p = x
	return p
}

func (x ProjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[10].Descriptor()
}

func (ProjectStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[10]
}

func (x ProjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectStatus.Descriptor instead.
func (ProjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{10}
}

type PublicHttpRoutingDomainDnsCheckStatus int32

const (
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN  PublicHttpRoutingDomainDnsCheckStatus = 0
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING  PublicHttpRoutingDomainDnsCheckStatus = 1
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING PublicHttpRoutingDomainDnsCheckStatus = 2
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK       PublicHttpRoutingDomainDnsCheckStatus = 3
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED   PublicHttpRoutingDomainDnsCheckStatus = 4
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED  PublicHttpRoutingDomainDnsCheckStatus = 5
)

// Enum value maps for PublicHttpRoutingDomainDnsCheckStatus.
var (
	PublicHttpRoutingDomainDnsCheckStatus_name = map[int32]string{
		0: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN",
		1: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING",
		2: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING",
		3: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK",
		4: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED",
		5: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED",
	}
	PublicHttpRoutingDomainDnsCheckStatus_value = map[string]int32{
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN":  0,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING":  1,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING": 2,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK":       3,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED":   4,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED":  5,
	}
)

func (x PublicHttpRoutingDomainDnsCheckStatus) Enum() *PublicHttpRoutingDomainDnsCheckStatus {
	p := new(PublicHttpRoutingDomainDnsCheckStatus)
	*p = x
	return p
}

func (x PublicHttpRoutingDomainDnsCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicHttpRoutingDomainDnsCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[11].Descriptor()
}

func (PublicHttpRoutingDomainDnsCheckStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[11]
}

func (x PublicHttpRoutingDomainDnsCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicHttpRoutingDomainDnsCheckStatus.Descriptor instead.
func (PublicHttpRoutingDomainDnsCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{11}
}

type PublicHttpRoutingDomainSslStatus int32

const (
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN             PublicHttpRoutingDomainSslStatus = 0
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE            PublicHttpRoutingDomainSslStatus = 1
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED     PublicHttpRoutingDomainSslStatus = 2
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS     PublicHttpRoutingDomainSslStatus = 3
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE              PublicHttpRoutingDomainSslStatus = 4
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED PublicHttpRoutingDomainSslStatus = 5
)

// Enum value maps for PublicHttpRoutingDomainSslStatus.
var (
	PublicHttpRoutingDomainSslStatus_name = map[int32]string{
		0: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN",
		1: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE",
		2: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED",
		3: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS",
		4: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE",
		5: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED",
	}
	PublicHttpRoutingDomainSslStatus_value = map[string]int32{
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN":             0,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE":            1,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED":     2,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS":     3,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE":              4,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED": 5,
	}
)

func (x PublicHttpRoutingDomainSslStatus) Enum() *PublicHttpRoutingDomainSslStatus {
	p := new(PublicHttpRoutingDomainSslStatus)
	*p = x
	return p
}

func (x PublicHttpRoutingDomainSslStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicHttpRoutingDomainSslStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[12].Descriptor()
}

func (PublicHttpRoutingDomainSslStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[12]
}

func (x PublicHttpRoutingDomainSslStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicHttpRoutingDomainSslStatus.Descriptor instead.
func (PublicHttpRoutingDomainSslStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{12}
}

type ServicePortProtocol int32

const (
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_UNKNOWN ServicePortProtocol = 0
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_tcp     ServicePortProtocol = 1
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_udp     ServicePortProtocol = 2
)

// Enum value maps for ServicePortProtocol.
var (
	ServicePortProtocol_name = map[int32]string{
		0: "SERVICE_PORT_PROTOCOL_UNKNOWN",
		1: "SERVICE_PORT_PROTOCOL_tcp",
		2: "SERVICE_PORT_PROTOCOL_udp",
	}
	ServicePortProtocol_value = map[string]int32{
		"SERVICE_PORT_PROTOCOL_UNKNOWN": 0,
		"SERVICE_PORT_PROTOCOL_tcp":     1,
		"SERVICE_PORT_PROTOCOL_udp":     2,
	}
)

func (x ServicePortProtocol) Enum() *ServicePortProtocol {
	p := new(ServicePortProtocol)
	*p = x
	return p
}

func (x ServicePortProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePortProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[13].Descriptor()
}

func (ServicePortProtocol) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[13]
}

func (x ServicePortProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePortProtocol.Descriptor instead.
func (ServicePortProtocol) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{13}
}

type ServicePortScheme int32

const (
	ServicePortScheme_SERVICE_PORT_SCHEME_UNKNOWN   ServicePortScheme = 0
	ServicePortScheme_SERVICE_PORT_SCHEME_tcp       ServicePortScheme = 1
	ServicePortScheme_SERVICE_PORT_SCHEME_udp       ServicePortScheme = 2
	ServicePortScheme_SERVICE_PORT_SCHEME_http      ServicePortScheme = 3
	ServicePortScheme_SERVICE_PORT_SCHEME_https     ServicePortScheme = 4
	ServicePortScheme_SERVICE_PORT_SCHEME_redis     ServicePortScheme = 5
	ServicePortScheme_SERVICE_PORT_SCHEME_rabbitmq  ServicePortScheme = 6
	ServicePortScheme_SERVICE_PORT_SCHEME_mysql     ServicePortScheme = 7
	ServicePortScheme_SERVICE_PORT_SCHEME_udpinflux ServicePortScheme = 8
	ServicePortScheme_SERVICE_PORT_SCHEME_mongodb   ServicePortScheme = 9
)

// Enum value maps for ServicePortScheme.
var (
	ServicePortScheme_name = map[int32]string{
		0: "SERVICE_PORT_SCHEME_UNKNOWN",
		1: "SERVICE_PORT_SCHEME_tcp",
		2: "SERVICE_PORT_SCHEME_udp",
		3: "SERVICE_PORT_SCHEME_http",
		4: "SERVICE_PORT_SCHEME_https",
		5: "SERVICE_PORT_SCHEME_redis",
		6: "SERVICE_PORT_SCHEME_rabbitmq",
		7: "SERVICE_PORT_SCHEME_mysql",
		8: "SERVICE_PORT_SCHEME_udpinflux",
		9: "SERVICE_PORT_SCHEME_mongodb",
	}
	ServicePortScheme_value = map[string]int32{
		"SERVICE_PORT_SCHEME_UNKNOWN":   0,
		"SERVICE_PORT_SCHEME_tcp":       1,
		"SERVICE_PORT_SCHEME_udp":       2,
		"SERVICE_PORT_SCHEME_http":      3,
		"SERVICE_PORT_SCHEME_https":     4,
		"SERVICE_PORT_SCHEME_redis":     5,
		"SERVICE_PORT_SCHEME_rabbitmq":  6,
		"SERVICE_PORT_SCHEME_mysql":     7,
		"SERVICE_PORT_SCHEME_udpinflux": 8,
		"SERVICE_PORT_SCHEME_mongodb":   9,
	}
)

func (x ServicePortScheme) Enum() *ServicePortScheme {
	p := new(ServicePortScheme)
	*p = x
	return p
}

func (x ServicePortScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePortScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[14].Descriptor()
}

func (ServicePortScheme) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[14]
}

func (x ServicePortScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePortScheme.Descriptor instead.
func (ServicePortScheme) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{14}
}

type ServiceStackConnectionStatus int32

const (
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_UNKNOWN  ServiceStackConnectionStatus = 0
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_CREATING ServiceStackConnectionStatus = 1
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_ACTIVE   ServiceStackConnectionStatus = 2
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_DELETING ServiceStackConnectionStatus = 3
)

// Enum value maps for ServiceStackConnectionStatus.
var (
	ServiceStackConnectionStatus_name = map[int32]string{
		0: "SERVICE_STACK_CONNECTION_STATUS_UNKNOWN",
		1: "SERVICE_STACK_CONNECTION_STATUS_CREATING",
		2: "SERVICE_STACK_CONNECTION_STATUS_ACTIVE",
		3: "SERVICE_STACK_CONNECTION_STATUS_DELETING",
	}
	ServiceStackConnectionStatus_value = map[string]int32{
		"SERVICE_STACK_CONNECTION_STATUS_UNKNOWN":  0,
		"SERVICE_STACK_CONNECTION_STATUS_CREATING": 1,
		"SERVICE_STACK_CONNECTION_STATUS_ACTIVE":   2,
		"SERVICE_STACK_CONNECTION_STATUS_DELETING": 3,
	}
)

func (x ServiceStackConnectionStatus) Enum() *ServiceStackConnectionStatus {
	p := new(ServiceStackConnectionStatus)
	*p = x
	return p
}

func (x ServiceStackConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[15].Descriptor()
}

func (ServiceStackConnectionStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[15]
}

func (x ServiceStackConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackConnectionStatus.Descriptor instead.
func (ServiceStackConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{15}
}

type ServiceStackInfoJsonObjectServiceStackTypeCategory int32

const (
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN          ServiceStackInfoJsonObjectServiceStackTypeCategory = 0
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_CORE             ServiceStackInfoJsonObjectServiceStackTypeCategory = 1
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER ServiceStackInfoJsonObjectServiceStackTypeCategory = 2
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_STANDARD         ServiceStackInfoJsonObjectServiceStackTypeCategory = 3
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_USER             ServiceStackInfoJsonObjectServiceStackTypeCategory = 4
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE   ServiceStackInfoJsonObjectServiceStackTypeCategory = 5
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE   ServiceStackInfoJsonObjectServiceStackTypeCategory = 6
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_BUILD            ServiceStackInfoJsonObjectServiceStackTypeCategory = 7
	ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_INTERNAL         ServiceStackInfoJsonObjectServiceStackTypeCategory = 8
)

// Enum value maps for ServiceStackInfoJsonObjectServiceStackTypeCategory.
var (
	ServiceStackInfoJsonObjectServiceStackTypeCategory_name = map[int32]string{
		0: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN",
		1: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_CORE",
		2: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER",
		3: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_STANDARD",
		4: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_USER",
		5: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE",
		6: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE",
		7: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_BUILD",
		8: "SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_INTERNAL",
	}
	ServiceStackInfoJsonObjectServiceStackTypeCategory_value = map[string]int32{
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN":          0,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_CORE":             1,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER": 2,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_STANDARD":         3,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_USER":             4,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE":   5,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE":   6,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_BUILD":            7,
		"SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_INTERNAL":         8,
	}
)

func (x ServiceStackInfoJsonObjectServiceStackTypeCategory) Enum() *ServiceStackInfoJsonObjectServiceStackTypeCategory {
	p := new(ServiceStackInfoJsonObjectServiceStackTypeCategory)
	*p = x
	return p
}

func (x ServiceStackInfoJsonObjectServiceStackTypeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackInfoJsonObjectServiceStackTypeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[16].Descriptor()
}

func (ServiceStackInfoJsonObjectServiceStackTypeCategory) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[16]
}

func (x ServiceStackInfoJsonObjectServiceStackTypeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackInfoJsonObjectServiceStackTypeCategory.Descriptor instead.
func (ServiceStackInfoJsonObjectServiceStackTypeCategory) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{16}
}

type ServiceStackMode int32

const (
	ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN ServiceStackMode = 0
	ServiceStackMode_SERVICE_STACK_MODE_HA      ServiceStackMode = 1
	ServiceStackMode_SERVICE_STACK_MODE_NON_HA  ServiceStackMode = 2
)

// Enum value maps for ServiceStackMode.
var (
	ServiceStackMode_name = map[int32]string{
		0: "SERVICE_STACK_MODE_UNKNOWN",
		1: "SERVICE_STACK_MODE_HA",
		2: "SERVICE_STACK_MODE_NON_HA",
	}
	ServiceStackMode_value = map[string]int32{
		"SERVICE_STACK_MODE_UNKNOWN": 0,
		"SERVICE_STACK_MODE_HA":      1,
		"SERVICE_STACK_MODE_NON_HA":  2,
	}
)

func (x ServiceStackMode) Enum() *ServiceStackMode {
	p := new(ServiceStackMode)
	*p = x
	return p
}

func (x ServiceStackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[17].Descriptor()
}

func (ServiceStackMode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[17]
}

func (x ServiceStackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackMode.Descriptor instead.
func (ServiceStackMode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{17}
}

type ServiceStackStatus int32

const (
	ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN                  ServiceStackStatus = 0
	ServiceStackStatus_SERVICE_STACK_STATUS_NEW                      ServiceStackStatus = 1
	ServiceStackStatus_SERVICE_STACK_STATUS_CREATING                 ServiceStackStatus = 2
	ServiceStackStatus_SERVICE_STACK_STATUS_ACTIVE                   ServiceStackStatus = 3
	ServiceStackStatus_SERVICE_STACK_STATUS_STOPPING                 ServiceStackStatus = 4
	ServiceStackStatus_SERVICE_STACK_STATUS_STOPPED                  ServiceStackStatus = 5
	ServiceStackStatus_SERVICE_STACK_STATUS_STARTING                 ServiceStackStatus = 6
	ServiceStackStatus_SERVICE_STACK_STATUS_RESTARTING               ServiceStackStatus = 7
	ServiceStackStatus_SERVICE_STACK_STATUS_RELOADING                ServiceStackStatus = 8
	ServiceStackStatus_SERVICE_STACK_STATUS_DELETING                 ServiceStackStatus = 9
	ServiceStackStatus_SERVICE_STACK_STATUS_DELETED                  ServiceStackStatus = 10
	ServiceStackStatus_SERVICE_STACK_STATUS_FAILED                   ServiceStackStatus = 11
	ServiceStackStatus_SERVICE_STACK_STATUS_ACTION_FAILED            ServiceStackStatus = 12
	ServiceStackStatus_SERVICE_STACK_STATUS_UPGRADING                ServiceStackStatus = 13
	ServiceStackStatus_SERVICE_STACK_STATUS_READY_TO_DEPLOY          ServiceStackStatus = 14
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_DELETING         ServiceStackStatus = 15
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_FAILED           ServiceStackStatus = 16
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_REPAIRING        ServiceStackStatus = 17
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_CREATING         ServiceStackStatus = 18
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED ServiceStackStatus = 19
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER ServiceStackStatus = 20
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STOPPING         ServiceStackStatus = 21
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STOPPED          ServiceStackStatus = 22
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STARTING         ServiceStackStatus = 23
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_RESTARTING       ServiceStackStatus = 24
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_RELOADING        ServiceStackStatus = 25
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_UPGRADING        ServiceStackStatus = 26
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED    ServiceStackStatus = 27
)

// Enum value maps for ServiceStackStatus.
var (
	ServiceStackStatus_name = map[int32]string{
		0:  "SERVICE_STACK_STATUS_UNKNOWN",
		1:  "SERVICE_STACK_STATUS_NEW",
		2:  "SERVICE_STACK_STATUS_CREATING",
		3:  "SERVICE_STACK_STATUS_ACTIVE",
		4:  "SERVICE_STACK_STATUS_STOPPING",
		5:  "SERVICE_STACK_STATUS_STOPPED",
		6:  "SERVICE_STACK_STATUS_STARTING",
		7:  "SERVICE_STACK_STATUS_RESTARTING",
		8:  "SERVICE_STACK_STATUS_RELOADING",
		9:  "SERVICE_STACK_STATUS_DELETING",
		10: "SERVICE_STACK_STATUS_DELETED",
		11: "SERVICE_STACK_STATUS_FAILED",
		12: "SERVICE_STACK_STATUS_ACTION_FAILED",
		13: "SERVICE_STACK_STATUS_UPGRADING",
		14: "SERVICE_STACK_STATUS_READY_TO_DEPLOY",
		15: "SERVICE_STACK_STATUS_SERVICE_DELETING",
		16: "SERVICE_STACK_STATUS_SERVICE_FAILED",
		17: "SERVICE_STACK_STATUS_SERVICE_REPAIRING",
		18: "SERVICE_STACK_STATUS_SERVICE_CREATING",
		19: "SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED",
		20: "SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER",
		21: "SERVICE_STACK_STATUS_SERVICE_STOPPING",
		22: "SERVICE_STACK_STATUS_SERVICE_STOPPED",
		23: "SERVICE_STACK_STATUS_SERVICE_STARTING",
		24: "SERVICE_STACK_STATUS_SERVICE_RESTARTING",
		25: "SERVICE_STACK_STATUS_SERVICE_RELOADING",
		26: "SERVICE_STACK_STATUS_SERVICE_UPGRADING",
		27: "SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED",
	}
	ServiceStackStatus_value = map[string]int32{
		"SERVICE_STACK_STATUS_UNKNOWN":                  0,
		"SERVICE_STACK_STATUS_NEW":                      1,
		"SERVICE_STACK_STATUS_CREATING":                 2,
		"SERVICE_STACK_STATUS_ACTIVE":                   3,
		"SERVICE_STACK_STATUS_STOPPING":                 4,
		"SERVICE_STACK_STATUS_STOPPED":                  5,
		"SERVICE_STACK_STATUS_STARTING":                 6,
		"SERVICE_STACK_STATUS_RESTARTING":               7,
		"SERVICE_STACK_STATUS_RELOADING":                8,
		"SERVICE_STACK_STATUS_DELETING":                 9,
		"SERVICE_STACK_STATUS_DELETED":                  10,
		"SERVICE_STACK_STATUS_FAILED":                   11,
		"SERVICE_STACK_STATUS_ACTION_FAILED":            12,
		"SERVICE_STACK_STATUS_UPGRADING":                13,
		"SERVICE_STACK_STATUS_READY_TO_DEPLOY":          14,
		"SERVICE_STACK_STATUS_SERVICE_DELETING":         15,
		"SERVICE_STACK_STATUS_SERVICE_FAILED":           16,
		"SERVICE_STACK_STATUS_SERVICE_REPAIRING":        17,
		"SERVICE_STACK_STATUS_SERVICE_CREATING":         18,
		"SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED": 19,
		"SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER": 20,
		"SERVICE_STACK_STATUS_SERVICE_STOPPING":         21,
		"SERVICE_STACK_STATUS_SERVICE_STOPPED":          22,
		"SERVICE_STACK_STATUS_SERVICE_STARTING":         23,
		"SERVICE_STACK_STATUS_SERVICE_RESTARTING":       24,
		"SERVICE_STACK_STATUS_SERVICE_RELOADING":        25,
		"SERVICE_STACK_STATUS_SERVICE_UPGRADING":        26,
		"SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED":    27,
	}
)

func (x ServiceStackStatus) Enum() *ServiceStackStatus {
	p := new(ServiceStackStatus)
	*p = x
	return p
}

func (x ServiceStackStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[18].Descriptor()
}

func (ServiceStackStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[18]
}

func (x ServiceStackStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackStatus.Descriptor instead.
func (ServiceStackStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{18}
}

type UserDataType int32

const (
	UserDataType_USER_DATA_TYPE_UNKNOWN    UserDataType = 0
	UserDataType_USER_DATA_TYPE_RESTRICTED UserDataType = 1
	UserDataType_USER_DATA_TYPE_COMMON     UserDataType = 2
	UserDataType_USER_DATA_TYPE_USER       UserDataType = 3
	UserDataType_USER_DATA_TYPE_INTERNAL   UserDataType = 4
)

// Enum value maps for UserDataType.
var (
	UserDataType_name = map[int32]string{
		0: "USER_DATA_TYPE_UNKNOWN",
		1: "USER_DATA_TYPE_RESTRICTED",
		2: "USER_DATA_TYPE_COMMON",
		3: "USER_DATA_TYPE_USER",
		4: "USER_DATA_TYPE_INTERNAL",
	}
	UserDataType_value = map[string]int32{
		"USER_DATA_TYPE_UNKNOWN":    0,
		"USER_DATA_TYPE_RESTRICTED": 1,
		"USER_DATA_TYPE_COMMON":     2,
		"USER_DATA_TYPE_USER":       3,
		"USER_DATA_TYPE_INTERNAL":   4,
	}
)

func (x UserDataType) Enum() *UserDataType {
	p := new(UserDataType)
	*p = x
	return p
}

func (x UserDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[19].Descriptor()
}

func (UserDataType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[19]
}

func (x UserDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserDataType.Descriptor instead.
func (UserDataType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{19}
}

type UserJsonObjectType int32

const (
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_UNKNOWN UserJsonObjectType = 0
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_GITHUB  UserJsonObjectType = 1
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_GITLAB  UserJsonObjectType = 2
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_USER    UserJsonObjectType = 3
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_SYSTEM  UserJsonObjectType = 4
)

// Enum value maps for UserJsonObjectType.
var (
	UserJsonObjectType_name = map[int32]string{
		0: "USER_JSON_OBJECT_TYPE_UNKNOWN",
		1: "USER_JSON_OBJECT_TYPE_GITHUB",
		2: "USER_JSON_OBJECT_TYPE_GITLAB",
		3: "USER_JSON_OBJECT_TYPE_USER",
		4: "USER_JSON_OBJECT_TYPE_SYSTEM",
	}
	UserJsonObjectType_value = map[string]int32{
		"USER_JSON_OBJECT_TYPE_UNKNOWN": 0,
		"USER_JSON_OBJECT_TYPE_GITHUB":  1,
		"USER_JSON_OBJECT_TYPE_GITLAB":  2,
		"USER_JSON_OBJECT_TYPE_USER":    3,
		"USER_JSON_OBJECT_TYPE_SYSTEM":  4,
	}
)

func (x UserJsonObjectType) Enum() *UserJsonObjectType {
	p := new(UserJsonObjectType)
	*p = x
	return p
}

func (x UserJsonObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserJsonObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[20].Descriptor()
}

func (UserJsonObjectType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[20]
}

func (x UserJsonObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserJsonObjectType.Descriptor instead.
func (UserJsonObjectType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{20}
}

type UserStatus int32

const (
	UserStatus_USER_STATUS_UNKNOWN UserStatus = 0
	UserStatus_USER_STATUS_ACTIVE  UserStatus = 1
	UserStatus_USER_STATUS_DELETED UserStatus = 2
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNKNOWN",
		1: "USER_STATUS_ACTIVE",
		2: "USER_STATUS_DELETED",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNKNOWN": 0,
		"USER_STATUS_ACTIVE":  1,
		"USER_STATUS_DELETED": 2,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[21].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[21]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{21}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=zeropsApiProtocol.ErrorCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NO_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSet   bool  `protobuf:"varint,1,opt,name=isSet,proto3" json:"isSet,omitempty"`
	Seconds int64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,3,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *Timestamp) GetIsSet() bool {
	if x != nil {
		return x.IsSet
	}
	return false
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type GetProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProcessRequest) Reset() {
	*x = GetProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessRequest) ProtoMessage() {}

func (x *GetProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessRequest.ProtoReflect.Descriptor instead.
func (*GetProcessRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *GetProcessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProjectLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProjectLogRequest) Reset() {
	*x = GetProjectLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectLogRequest) ProtoMessage() {}

func (x *GetProjectLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectLogRequest.ProtoReflect.Descriptor instead.
func (*GetProjectLogRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *GetProjectLogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProjectsByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectsByNameRequest) Reset() {
	*x = GetProjectsByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameRequest) ProtoMessage() {}

func (x *GetProjectsByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *GetProjectsByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetServiceStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServiceStackRequest) Reset() {
	*x = GetServiceStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackRequest) ProtoMessage() {}

func (x *GetServiceStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackRequest.ProtoReflect.Descriptor instead.
func (*GetServiceStackRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *GetServiceStackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetServiceStackByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetServiceStackByNameRequest) Reset() {
	*x = GetServiceStackByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameRequest) ProtoMessage() {}

func (x *GetServiceStackByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameRequest.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *GetServiceStackByNameRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetServiceStackByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{7}
}

type PostAppVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackId string      `protobuf:"bytes,1,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Name           *StringNull `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PostAppVersionRequest) Reset() {
	*x = PostAppVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionRequest) ProtoMessage() {}

func (x *PostAppVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionRequest.ProtoReflect.Descriptor instead.
func (*PostAppVersionRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{8}
}

func (x *PostAppVersionRequest) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PostAppVersionRequest) GetName() *StringNull {
	if x != nil {
		return x.Name
	}
	return nil
}

type PostPublicHttpRoutingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string                           `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	SslEnabled bool                             `protobuf:"varint,2,opt,name=sslEnabled,proto3" json:"sslEnabled,omitempty"`
	Domains    []string                         `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	Locations  []*PublicHttpRoutingLocationPost `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *PostPublicHttpRoutingRequest) Reset() {
	*x = PostPublicHttpRoutingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingRequest) ProtoMessage() {}

func (x *PostPublicHttpRoutingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingRequest.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{9}
}

func (x *PostPublicHttpRoutingRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostPublicHttpRoutingRequest) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *PostPublicHttpRoutingRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PostPublicHttpRoutingRequest) GetLocations() []*PublicHttpRoutingLocationPost {
	if x != nil {
		return x.Locations
	}
	return nil
}

type PostVpnRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientPublicKey string `protobuf:"bytes,2,opt,name=clientPublicKey,proto3" json:"clientPublicKey,omitempty"`
}

func (x *PostVpnRequestRequest) Reset() {
	*x = PostVpnRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestRequest) ProtoMessage() {}

func (x *PostVpnRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestRequest.ProtoReflect.Descriptor instead.
func (*PostVpnRequestRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{10}
}

func (x *PostVpnRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostVpnRequestRequest) GetClientPublicKey() string {
	if x != nil {
		return x.ClientPublicKey
	}
	return ""
}

type PublicHttpRoutingLocationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path           string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port           int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServiceStackId string `protobuf:"bytes,3,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
}

func (x *PublicHttpRoutingLocationPost) Reset() {
	*x = PublicHttpRoutingLocationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingLocationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingLocationPost) ProtoMessage() {}

func (x *PublicHttpRoutingLocationPost) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingLocationPost.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingLocationPost) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{11}
}

func (x *PublicHttpRoutingLocationPost) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicHttpRoutingLocationPost) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PublicHttpRoutingLocationPost) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

type PutAppVersionBuildAndDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BuildConfigContent string `protobuf:"bytes,2,opt,name=buildConfigContent,proto3" json:"buildConfigContent,omitempty"`
}

func (x *PutAppVersionBuildAndDeployRequest) Reset() {
	*x = PutAppVersionBuildAndDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployRequest) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployRequest.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{12}
}

func (x *PutAppVersionBuildAndDeployRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployRequest) GetBuildConfigContent() string {
	if x != nil {
		return x.BuildConfigContent
	}
	return ""
}

type PutAppVersionDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TemporaryShutdown bool   `protobuf:"varint,2,opt,name=temporaryShutdown,proto3" json:"temporaryShutdown,omitempty"`
}

func (x *PutAppVersionDeployRequest) Reset() {
	*x = PutAppVersionDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployRequest) ProtoMessage() {}

func (x *PutAppVersionDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployRequest.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{13}
}

func (x *PutAppVersionDeployRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionDeployRequest) GetTemporaryShutdown() bool {
	if x != nil {
		return x.TemporaryShutdown
	}
	return false
}

type GetProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetProcessResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetProcessResponse) Reset() {
	*x = GetProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessResponse) ProtoMessage() {}

func (x *GetProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessResponse.ProtoReflect.Descriptor instead.
func (*GetProcessResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{14}
}

func (x *GetProcessResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProcessResponse) GetOutput() *GetProcessResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetProcessResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId           string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Project            *ProjectLightJsonObjectNull    `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks      []*ServiceStackLightJsonObject `protobuf:"bytes,4,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status             ProcessStatus                  `protobuf:"varint,5,opt,name=status,proto3,enum=zeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	CreatedByUser      *UserJsonObject                `protobuf:"bytes,6,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser     *UserJsonObjectNull            `protobuf:"bytes,7,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName         string                         `protobuf:"bytes,8,opt,name=actionName,proto3" json:"actionName,omitempty"`
	BlockedByProcessId *StringNull                    `protobuf:"bytes,9,opt,name=blockedByProcessId,proto3" json:"blockedByProcessId,omitempty"`
	Created            *Timestamp                     `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate         *Timestamp                     `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	CreatedBySystem    bool                           `protobuf:"varint,12,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion         *AppVersionJsonObjectNull      `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *GetProcessResponseDto) Reset() {
	*x = GetProcessResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessResponseDto) ProtoMessage() {}

func (x *GetProcessResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessResponseDto.ProtoReflect.Descriptor instead.
func (*GetProcessResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{15}
}

func (x *GetProcessResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProcessResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetProcessResponseDto) GetProject() *ProjectLightJsonObjectNull {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetProcessResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *GetProcessResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *GetProcessResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *GetProcessResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *GetProcessResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *GetProcessResponseDto) GetBlockedByProcessId() *StringNull {
	if x != nil {
		return x.BlockedByProcessId
	}
	return nil
}

func (x *GetProcessResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetProcessResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetProcessResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *GetProcessResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type GetProjectLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetProjectLogResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetProjectLogResponse) Reset() {
	*x = GetProjectLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectLogResponse) ProtoMessage() {}

func (x *GetProjectLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectLogResponse.ProtoReflect.Descriptor instead.
func (*GetProjectLogResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{16}
}

func (x *GetProjectLogResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProjectLogResponse) GetOutput() *GetProjectLogResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetProjectLogResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url       string     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Signature string     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Expiry    *Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *GetProjectLogResponseDto) Reset() {
	*x = GetProjectLogResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectLogResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectLogResponseDto) ProtoMessage() {}

func (x *GetProjectLogResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectLogResponseDto.ProtoReflect.Descriptor instead.
func (*GetProjectLogResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{17}
}

func (x *GetProjectLogResponseDto) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetProjectLogResponseDto) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *GetProjectLogResponseDto) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type GetProjectsByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetProjectsByNameResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetProjectsByNameResponse) Reset() {
	*x = GetProjectsByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameResponse) ProtoMessage() {}

func (x *GetProjectsByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{18}
}

func (x *GetProjectsByNameResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProjectsByNameResponse) GetOutput() *GetProjectsByNameResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetProjectsByNameResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *GetProjectsByNameResponseDto) Reset() {
	*x = GetProjectsByNameResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameResponseDto) ProtoMessage() {}

func (x *GetProjectsByNameResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameResponseDto.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{19}
}

func (x *GetProjectsByNameResponseDto) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetServiceStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetServiceStackResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetServiceStackResponse) Reset() {
	*x = GetServiceStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackResponse) ProtoMessage() {}

func (x *GetServiceStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackResponse.ProtoReflect.Descriptor instead.
func (*GetServiceStackResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{20}
}

func (x *GetServiceStackResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceStackResponse) GetOutput() *GetServiceStackResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetServiceStackResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                             ServiceStackStatus                   `protobuf:"varint,2,opt,name=status,proto3,enum=zeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                               string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo               *ServiceStackInfoJsonObject          `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId                 string                               `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId          string                               `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                           bool                                 `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	GithubIntegration                  *GithubIntegrationNull               `protobuf:"bytes,8,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration                  *GitlabIntegrationNull               `protobuf:"bytes,9,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	Ports                              []*ServicePort                       `protobuf:"bytes,10,rep,name=ports,proto3" json:"ports,omitempty"`
	RequestedPorts                     *RequestedPortsJsonObject            `protobuf:"bytes,11,opt,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
	Created                            *Timestamp                           `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                         *Timestamp                           `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Mode                               ServiceStackMode                     `protobuf:"varint,14,opt,name=mode,proto3,enum=zeropsApiProtocol.ServiceStackMode" json:"mode,omitempty"`
	CustomPortsEnabled                 bool                                 `protobuf:"varint,15,opt,name=customPortsEnabled,proto3" json:"customPortsEnabled,omitempty"`
	SubdomainAccess                    bool                                 `protobuf:"varint,16,opt,name=subdomainAccess,proto3" json:"subdomainAccess,omitempty"`
	ReloadAvailable                    bool                                 `protobuf:"varint,17,opt,name=reloadAvailable,proto3" json:"reloadAvailable,omitempty"`
	VersionNumber                      string                               `protobuf:"bytes,18,opt,name=versionNumber,proto3" json:"versionNumber,omitempty"`
	Project                            *ProjectLight                        `protobuf:"bytes,19,opt,name=project,proto3" json:"project,omitempty"`
	ConnectedStacks                    []*ServiceStackConnectedServiceStack `protobuf:"bytes,20,rep,name=connectedStacks,proto3" json:"connectedStacks,omitempty"`
	ActiveAppVersion                   *AppVersionLightNull                 `protobuf:"bytes,21,opt,name=activeAppVersion,proto3" json:"activeAppVersion,omitempty"`
	HasUnsyncedUserDataRecord          bool                                 `protobuf:"varint,22,opt,name=hasUnsyncedUserDataRecord,proto3" json:"hasUnsyncedUserDataRecord,omitempty"`
	HasUnsyncedPublicHttpRoutingRecord bool                                 `protobuf:"varint,23,opt,name=hasUnsyncedPublicHttpRoutingRecord,proto3" json:"hasUnsyncedPublicHttpRoutingRecord,omitempty"`
	HasUnsyncedPublicPortRecord        bool                                 `protobuf:"varint,24,opt,name=hasUnsyncedPublicPortRecord,proto3" json:"hasUnsyncedPublicPortRecord,omitempty"`
	HasPublicPortRoutingAccess         bool                                 `protobuf:"varint,25,opt,name=hasPublicPortRoutingAccess,proto3" json:"hasPublicPortRoutingAccess,omitempty"`
	HasPublicHttpRoutingAccess         bool                                 `protobuf:"varint,26,opt,name=hasPublicHttpRoutingAccess,proto3" json:"hasPublicHttpRoutingAccess,omitempty"`
	ActivePublicHttpRoutingCount       *Int32Null                           `protobuf:"bytes,27,opt,name=activePublicHttpRoutingCount,proto3" json:"activePublicHttpRoutingCount,omitempty"`
	ActivePublicPortRoutingCount       *Int32Null                           `protobuf:"bytes,28,opt,name=activePublicPortRoutingCount,proto3" json:"activePublicPortRoutingCount,omitempty"`
}

func (x *GetServiceStackResponseDto) Reset() {
	*x = GetServiceStackResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackResponseDto) ProtoMessage() {}

func (x *GetServiceStackResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackResponseDto.ProtoReflect.Descriptor instead.
func (*GetServiceStackResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{21}
}

func (x *GetServiceStackResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *GetServiceStackResponseDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *GetServiceStackResponseDto) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetRequestedPorts() *RequestedPortsJsonObject {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetMode() ServiceStackMode {
	if x != nil {
		return x.Mode
	}
	return ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN
}

func (x *GetServiceStackResponseDto) GetCustomPortsEnabled() bool {
	if x != nil {
		return x.CustomPortsEnabled
	}
	return false
}

func (x *GetServiceStackResponseDto) GetSubdomainAccess() bool {
	if x != nil {
		return x.SubdomainAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetReloadAvailable() bool {
	if x != nil {
		return x.ReloadAvailable
	}
	return false
}

func (x *GetServiceStackResponseDto) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetProject() *ProjectLight {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetConnectedStacks() []*ServiceStackConnectedServiceStack {
	if x != nil {
		return x.ConnectedStacks
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetActiveAppVersion() *AppVersionLightNull {
	if x != nil {
		return x.ActiveAppVersion
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedUserDataRecord() bool {
	if x != nil {
		return x.HasUnsyncedUserDataRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedPublicHttpRoutingRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicHttpRoutingRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedPublicPortRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicPortRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasPublicPortRoutingAccess() bool {
	if x != nil {
		return x.HasPublicPortRoutingAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasPublicHttpRoutingAccess() bool {
	if x != nil {
		return x.HasPublicHttpRoutingAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetActivePublicHttpRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicHttpRoutingCount
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetActivePublicPortRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicPortRoutingCount
	}
	return nil
}

type GetServiceStackByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetServiceStackByNameResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetServiceStackByNameResponse) Reset() {
	*x = GetServiceStackByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameResponse) ProtoMessage() {}

func (x *GetServiceStackByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameResponse.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{22}
}

func (x *GetServiceStackByNameResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceStackByNameResponse) GetOutput() *GetServiceStackByNameResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetServiceStackByNameResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                             ServiceStackStatus                   `protobuf:"varint,2,opt,name=status,proto3,enum=zeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                               string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo               *ServiceStackInfoJsonObject          `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId                 string                               `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId          string                               `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                           bool                                 `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	GithubIntegration                  *GithubIntegrationNull               `protobuf:"bytes,8,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration                  *GitlabIntegrationNull               `protobuf:"bytes,9,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	Ports                              []*ServicePort                       `protobuf:"bytes,10,rep,name=ports,proto3" json:"ports,omitempty"`
	RequestedPorts                     *RequestedPortsJsonObject            `protobuf:"bytes,11,opt,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
	Created                            *Timestamp                           `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                         *Timestamp                           `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Mode                               ServiceStackMode                     `protobuf:"varint,14,opt,name=mode,proto3,enum=zeropsApiProtocol.ServiceStackMode" json:"mode,omitempty"`
	CustomPortsEnabled                 bool                                 `protobuf:"varint,15,opt,name=customPortsEnabled,proto3" json:"customPortsEnabled,omitempty"`
	SubdomainAccess                    bool                                 `protobuf:"varint,16,opt,name=subdomainAccess,proto3" json:"subdomainAccess,omitempty"`
	ReloadAvailable                    bool                                 `protobuf:"varint,17,opt,name=reloadAvailable,proto3" json:"reloadAvailable,omitempty"`
	VersionNumber                      string                               `protobuf:"bytes,18,opt,name=versionNumber,proto3" json:"versionNumber,omitempty"`
	Project                            *ProjectLight                        `protobuf:"bytes,19,opt,name=project,proto3" json:"project,omitempty"`
	ConnectedStacks                    []*ServiceStackConnectedServiceStack `protobuf:"bytes,20,rep,name=connectedStacks,proto3" json:"connectedStacks,omitempty"`
	ActiveAppVersion                   *AppVersionLightNull                 `protobuf:"bytes,21,opt,name=activeAppVersion,proto3" json:"activeAppVersion,omitempty"`
	HasUnsyncedUserDataRecord          bool                                 `protobuf:"varint,22,opt,name=hasUnsyncedUserDataRecord,proto3" json:"hasUnsyncedUserDataRecord,omitempty"`
	HasUnsyncedPublicHttpRoutingRecord bool                                 `protobuf:"varint,23,opt,name=hasUnsyncedPublicHttpRoutingRecord,proto3" json:"hasUnsyncedPublicHttpRoutingRecord,omitempty"`
	HasUnsyncedPublicPortRecord        bool                                 `protobuf:"varint,24,opt,name=hasUnsyncedPublicPortRecord,proto3" json:"hasUnsyncedPublicPortRecord,omitempty"`
	HasPublicPortRoutingAccess         bool                                 `protobuf:"varint,25,opt,name=hasPublicPortRoutingAccess,proto3" json:"hasPublicPortRoutingAccess,omitempty"`
	HasPublicHttpRoutingAccess         bool                                 `protobuf:"varint,26,opt,name=hasPublicHttpRoutingAccess,proto3" json:"hasPublicHttpRoutingAccess,omitempty"`
	ActivePublicHttpRoutingCount       *Int32Null                           `protobuf:"bytes,27,opt,name=activePublicHttpRoutingCount,proto3" json:"activePublicHttpRoutingCount,omitempty"`
	ActivePublicPortRoutingCount       *Int32Null                           `protobuf:"bytes,28,opt,name=activePublicPortRoutingCount,proto3" json:"activePublicPortRoutingCount,omitempty"`
}

func (x *GetServiceStackByNameResponseDto) Reset() {
	*x = GetServiceStackByNameResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameResponseDto) ProtoMessage() {}

func (x *GetServiceStackByNameResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameResponseDto.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{23}
}

func (x *GetServiceStackByNameResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *GetServiceStackByNameResponseDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetRequestedPorts() *RequestedPortsJsonObject {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetMode() ServiceStackMode {
	if x != nil {
		return x.Mode
	}
	return ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN
}

func (x *GetServiceStackByNameResponseDto) GetCustomPortsEnabled() bool {
	if x != nil {
		return x.CustomPortsEnabled
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetSubdomainAccess() bool {
	if x != nil {
		return x.SubdomainAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetReloadAvailable() bool {
	if x != nil {
		return x.ReloadAvailable
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetProject() *ProjectLight {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetConnectedStacks() []*ServiceStackConnectedServiceStack {
	if x != nil {
		return x.ConnectedStacks
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetActiveAppVersion() *AppVersionLightNull {
	if x != nil {
		return x.ActiveAppVersion
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedUserDataRecord() bool {
	if x != nil {
		return x.HasUnsyncedUserDataRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedPublicHttpRoutingRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicHttpRoutingRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedPublicPortRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicPortRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasPublicPortRoutingAccess() bool {
	if x != nil {
		return x.HasPublicPortRoutingAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasPublicHttpRoutingAccess() bool {
	if x != nil {
		return x.HasPublicHttpRoutingAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetActivePublicHttpRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicHttpRoutingCount
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetActivePublicPortRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicPortRoutingCount
	}
	return nil
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetUserInfoResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{24}
}

func (x *GetUserInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUserInfoResponse) GetOutput() *GetUserInfoResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetUserInfoResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email              string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName           string          `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	FirstName          string          `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName           string          `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar             *UserAvatarNull `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CountryCallingCode *Int32Null      `protobuf:"bytes,7,opt,name=countryCallingCode,proto3" json:"countryCallingCode,omitempty"`
	PhoneNumber        *Int32Null      `protobuf:"bytes,8,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Language           *Language       `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`
	Created            *Timestamp      `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate         *Timestamp      `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Status             UserStatus      `protobuf:"varint,12,opt,name=status,proto3,enum=zeropsApiProtocol.UserStatus" json:"status,omitempty"`
	ClientUserList     []*ClientUser   `protobuf:"bytes,13,rep,name=clientUserList,proto3" json:"clientUserList,omitempty"`
}

func (x *GetUserInfoResponseDto) Reset() {
	*x = GetUserInfoResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponseDto) ProtoMessage() {}

func (x *GetUserInfoResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponseDto.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{25}
}

func (x *GetUserInfoResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetCountryCallingCode() *Int32Null {
	if x != nil {
		return x.CountryCallingCode
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetPhoneNumber() *Int32Null {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNKNOWN
}

func (x *GetUserInfoResponseDto) GetClientUserList() []*ClientUser {
	if x != nil {
		return x.ClientUserList
	}
	return nil
}

type PostAppVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostAppVersionResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostAppVersionResponse) Reset() {
	*x = PostAppVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionResponse) ProtoMessage() {}

func (x *PostAppVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionResponse.ProtoReflect.Descriptor instead.
func (*PostAppVersionResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{26}
}

func (x *PostAppVersionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostAppVersionResponse) GetOutput() *PostAppVersionResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostAppVersionResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId      string                `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId string                `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Build          *AppVersionBuildNull  `protobuf:"bytes,5,opt,name=build,proto3" json:"build,omitempty"`
	Sequence       int32                 `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Status         AppVersionStatus      `protobuf:"varint,7,opt,name=status,proto3,enum=zeropsApiProtocol.AppVersionStatus" json:"status,omitempty"`
	UserDataList   []*AppVersionUserData `protobuf:"bytes,8,rep,name=userDataList,proto3" json:"userDataList,omitempty"`
	Created        *Timestamp            `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate     *Timestamp            `protobuf:"bytes,10,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	UploadUrl      string                `protobuf:"bytes,11,opt,name=uploadUrl,proto3" json:"uploadUrl,omitempty"`
}

func (x *PostAppVersionResponseDto) Reset() {
	*x = PostAppVersionResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionResponseDto) ProtoMessage() {}

func (x *PostAppVersionResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionResponseDto.ProtoReflect.Descriptor instead.
func (*PostAppVersionResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{27}
}

func (x *PostAppVersionResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetBuild() *AppVersionBuildNull {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PostAppVersionResponseDto) GetStatus() AppVersionStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_APP_VERSION_STATUS_UNKNOWN
}

func (x *PostAppVersionResponseDto) GetUserDataList() []*AppVersionUserData {
	if x != nil {
		return x.UserDataList
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type PostPublicHttpRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostPublicHttpRoutingResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostPublicHttpRoutingResponse) Reset() {
	*x = PostPublicHttpRoutingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingResponse) ProtoMessage() {}

func (x *PostPublicHttpRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingResponse.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{28}
}

func (x *PostPublicHttpRoutingResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostPublicHttpRoutingResponse) GetOutput() *PostPublicHttpRoutingResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostPublicHttpRoutingResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId     string                       `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId    string                       `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	SslEnabled   bool                         `protobuf:"varint,4,opt,name=sslEnabled,proto3" json:"sslEnabled,omitempty"`
	Domains      []*PublicHttpRoutingDomain   `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	Locations    []*PublicHttpRoutingLocation `protobuf:"bytes,6,rep,name=locations,proto3" json:"locations,omitempty"`
	Created      *Timestamp                   `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate   *Timestamp                   `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	IsSynced     bool                         `protobuf:"varint,9,opt,name=isSynced,proto3" json:"isSynced,omitempty"`
	IsEditable   bool                         `protobuf:"varint,10,opt,name=isEditable,proto3" json:"isEditable,omitempty"`
	DeleteOnSync bool                         `protobuf:"varint,11,opt,name=deleteOnSync,proto3" json:"deleteOnSync,omitempty"`
}

func (x *PostPublicHttpRoutingResponseDto) Reset() {
	*x = PostPublicHttpRoutingResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingResponseDto) ProtoMessage() {}

func (x *PostPublicHttpRoutingResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingResponseDto.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{29}
}

func (x *PostPublicHttpRoutingResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetDomains() []*PublicHttpRoutingDomain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetLocations() []*PublicHttpRoutingLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetIsSynced() bool {
	if x != nil {
		return x.IsSynced
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetDeleteOnSync() bool {
	if x != nil {
		return x.DeleteOnSync
	}
	return false
}

type PostVpnRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostVpnRequestResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostVpnRequestResponse) Reset() {
	*x = PostVpnRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestResponse) ProtoMessage() {}

func (x *PostVpnRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestResponse.ProtoReflect.Descriptor instead.
func (*PostVpnRequestResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{30}
}

func (x *PostVpnRequestResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostVpnRequestResponse) GetOutput() *PostVpnRequestResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostVpnRequestResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string     `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Expiry    *Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PostVpnRequestResponseDto) Reset() {
	*x = PostVpnRequestResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestResponseDto) ProtoMessage() {}

func (x *PostVpnRequestResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestResponseDto.ProtoReflect.Descriptor instead.
func (*PostVpnRequestResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{31}
}

func (x *PostVpnRequestResponseDto) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *PostVpnRequestResponseDto) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type PutAppVersionBuildAndDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                                  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutAppVersionBuildAndDeployResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutAppVersionBuildAndDeployResponse) Reset() {
	*x = PutAppVersionBuildAndDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployResponse) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployResponse.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{32}
}

func (x *PutAppVersionBuildAndDeployResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponse) GetOutput() *PutAppVersionBuildAndDeployResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutAppVersionBuildAndDeployResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutAppVersionBuildAndDeployResponseDto) Reset() {
	*x = PutAppVersionBuildAndDeployResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployResponseDto) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployResponseDto.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{33}
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PutAppVersionDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutAppVersionDeployResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutAppVersionDeployResponse) Reset() {
	*x = PutAppVersionDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployResponse) ProtoMessage() {}

func (x *PutAppVersionDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployResponse.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{34}
}

func (x *PutAppVersionDeployResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutAppVersionDeployResponse) GetOutput() *PutAppVersionDeployResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutAppVersionDeployResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutAppVersionDeployResponseDto) Reset() {
	*x = PutAppVersionDeployResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployResponseDto) ProtoMessage() {}

func (x *PutAppVersionDeployResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployResponseDto.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{35}
}

func (x *PutAppVersionDeployResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AppVersionBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackId            *StringNull    `protobuf:"bytes,1,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ServiceStackName          *StringNull    `protobuf:"bytes,2,opt,name=serviceStackName,proto3" json:"serviceStackName,omitempty"`
	ServiceStackTypeVersionId *StringNull    `protobuf:"bytes,3,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	StartDate                 *TimestampNull `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                   *TimestampNull `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *AppVersionBuild) Reset() {
	*x = AppVersionBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionBuild) ProtoMessage() {}

func (x *AppVersionBuild) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionBuild.ProtoReflect.Descriptor instead.
func (*AppVersionBuild) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{36}
}

func (x *AppVersionBuild) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *AppVersionBuild) GetServiceStackName() *StringNull {
	if x != nil {
		return x.ServiceStackName
	}
	return nil
}

func (x *AppVersionBuild) GetServiceStackTypeVersionId() *StringNull {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return nil
}

func (x *AppVersionBuild) GetStartDate() *TimestampNull {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AppVersionBuild) GetEndDate() *TimestampNull {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type AppVersionGithubIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          AppVersionGithubIntegrationEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=zeropsApiProtocol.AppVersionGithubIntegrationEventType" json:"eventType,omitempty"`
	BranchName         *StringNull                          `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Pusher             string                               `protobuf:"bytes,3,opt,name=pusher,proto3" json:"pusher,omitempty"`
	Commit             string                               `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	RepositoryFullName string                               `protobuf:"bytes,5,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	TagName            *StringNull                          `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *AppVersionGithubIntegration) Reset() {
	*x = AppVersionGithubIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGithubIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGithubIntegration) ProtoMessage() {}

func (x *AppVersionGithubIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGithubIntegration.ProtoReflect.Descriptor instead.
func (*AppVersionGithubIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{37}
}

func (x *AppVersionGithubIntegration) GetEventType() AppVersionGithubIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *AppVersionGithubIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *AppVersionGithubIntegration) GetPusher() string {
	if x != nil {
		return x.Pusher
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetTagName() *StringNull {
	if x != nil {
		return x.TagName
	}
	return nil
}

type AppVersionGitlabIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          AppVersionGitlabIntegrationEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=zeropsApiProtocol.AppVersionGitlabIntegrationEventType" json:"eventType,omitempty"`
	BranchName         *StringNull                          `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Pusher             string                               `protobuf:"bytes,3,opt,name=pusher,proto3" json:"pusher,omitempty"`
	Commit             string                               `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	RepositoryFullName string                               `protobuf:"bytes,5,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	TagName            *StringNull                          `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *AppVersionGitlabIntegration) Reset() {
	*x = AppVersionGitlabIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGitlabIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGitlabIntegration) ProtoMessage() {}

func (x *AppVersionGitlabIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGitlabIntegration.ProtoReflect.Descriptor instead.
func (*AppVersionGitlabIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{38}
}

func (x *AppVersionGitlabIntegration) GetEventType() AppVersionGitlabIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *AppVersionGitlabIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *AppVersionGitlabIntegration) GetPusher() string {
	if x != nil {
		return x.Pusher
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetTagName() *StringNull {
	if x != nil {
		return x.TagName
	}
	return nil
}

type AppVersionJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Source            AppVersionSource                 `protobuf:"varint,2,opt,name=source,proto3,enum=zeropsApiProtocol.AppVersionSource" json:"source,omitempty"`
	Sequence          int32                            `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Build             *AppVersionBuildNull             `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
	GithubIntegration *AppVersionGithubIntegrationNull `protobuf:"bytes,5,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration *AppVersionGitlabIntegrationNull `protobuf:"bytes,6,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
}

func (x *AppVersionJsonObject) Reset() {
	*x = AppVersionJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionJsonObject) ProtoMessage() {}

func (x *AppVersionJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionJsonObject.ProtoReflect.Descriptor instead.
func (*AppVersionJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{39}
}

func (x *AppVersionJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionJsonObject) GetSource() AppVersionSource {
	if x != nil {
		return x.Source
	}
	return AppVersionSource_APP_VERSION_SOURCE_UNKNOWN
}

func (x *AppVersionJsonObject) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AppVersionJsonObject) GetBuild() *AppVersionBuildNull {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *AppVersionJsonObject) GetGithubIntegration() *AppVersionGithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *AppVersionJsonObject) GetGitlabIntegration() *AppVersionGitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

type AppVersionLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     AppVersionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zeropsApiProtocol.AppVersionStatus" json:"status,omitempty"`
	Created    *Timestamp       `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate *Timestamp       `protobuf:"bytes,4,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *AppVersionLight) Reset() {
	*x = AppVersionLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionLight) ProtoMessage() {}

func (x *AppVersionLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionLight.ProtoReflect.Descriptor instead.
func (*AppVersionLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{40}
}

func (x *AppVersionLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionLight) GetStatus() AppVersionStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_APP_VERSION_STATUS_UNKNOWN
}

func (x *AppVersionLight) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AppVersionLight) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type AppVersionUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Content string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type    UserDataType `protobuf:"varint,3,opt,name=type,proto3,enum=zeropsApiProtocol.UserDataType" json:"type,omitempty"`
}

func (x *AppVersionUserData) Reset() {
	*x = AppVersionUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionUserData) ProtoMessage() {}

func (x *AppVersionUserData) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionUserData.ProtoReflect.Descriptor instead.
func (*AppVersionUserData) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{41}
}

func (x *AppVersionUserData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AppVersionUserData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AppVersionUserData) GetType() UserDataType {
	if x != nil {
		return x.Type
	}
	return UserDataType_USER_DATA_TYPE_UNKNOWN
}

type ClientLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyName   string      `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName,omitempty"`
	CompanyNumber *StringNull `protobuf:"bytes,3,opt,name=companyNumber,proto3" json:"companyNumber,omitempty"`
	VatNumber     *StringNull `protobuf:"bytes,4,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
}

func (x *ClientLight) Reset() {
	*x = ClientLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLight) ProtoMessage() {}

func (x *ClientLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLight.ProtoReflect.Descriptor instead.
func (*ClientLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{42}
}

func (x *ClientLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientLight) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ClientLight) GetCompanyNumber() *StringNull {
	if x != nil {
		return x.CompanyNumber
	}
	return nil
}

func (x *ClientLight) GetVatNumber() *StringNull {
	if x != nil {
		return x.VatNumber
	}
	return nil
}

type ClientUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId string                  `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	UserId   string                  `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Status   ClientUserLightStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=zeropsApiProtocol.ClientUserLightStatus" json:"status,omitempty"`
	RoleCode ClientUserLightRoleCode `protobuf:"varint,5,opt,name=roleCode,proto3,enum=zeropsApiProtocol.ClientUserLightRoleCode" json:"roleCode,omitempty"`
	Client   *ClientLight            `protobuf:"bytes,6,opt,name=client,proto3" json:"client,omitempty"`
	User     *UserLight              `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ClientUser) Reset() {
	*x = ClientUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUser) ProtoMessage() {}

func (x *ClientUser) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUser.ProtoReflect.Descriptor instead.
func (*ClientUser) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{43}
}

func (x *ClientUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientUser) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientUser) GetStatus() ClientUserLightStatus {
	if x != nil {
		return x.Status
	}
	return ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_UNKNOWN
}

func (x *ClientUser) GetRoleCode() ClientUserLightRoleCode {
	if x != nil {
		return x.RoleCode
	}
	return ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN
}

func (x *ClientUser) GetClient() *ClientLight {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *ClientUser) GetUser() *UserLight {
	if x != nil {
		return x.User
	}
	return nil
}

type GithubIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AuthorizationRequired bool                       `protobuf:"varint,2,opt,name=authorizationRequired,proto3" json:"authorizationRequired,omitempty"`
	BranchName            *StringNull                `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
	EventType             GithubIntegrationEventType `protobuf:"varint,4,opt,name=eventType,proto3,enum=zeropsApiProtocol.GithubIntegrationEventType" json:"eventType,omitempty"`
	IsActive              bool                       `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RepositoryFullName    string                     `protobuf:"bytes,6,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	WebhookId             *Int32Null                 `protobuf:"bytes,7,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *GithubIntegration) Reset() {
	*x = GithubIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubIntegration) ProtoMessage() {}

func (x *GithubIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubIntegration.ProtoReflect.Descriptor instead.
func (*GithubIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{44}
}

func (x *GithubIntegration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GithubIntegration) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *GithubIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *GithubIntegration) GetEventType() GithubIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *GithubIntegration) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GithubIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GithubIntegration) GetWebhookId() *Int32Null {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type GitlabIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AuthorizationRequired bool                       `protobuf:"varint,2,opt,name=authorizationRequired,proto3" json:"authorizationRequired,omitempty"`
	BranchName            *StringNull                `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
	EventType             GitlabIntegrationEventType `protobuf:"varint,4,opt,name=eventType,proto3,enum=zeropsApiProtocol.GitlabIntegrationEventType" json:"eventType,omitempty"`
	IsActive              bool                       `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RepositoryFullName    string                     `protobuf:"bytes,6,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	WebhookId             *Int32Null                 `protobuf:"bytes,7,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *GitlabIntegration) Reset() {
	*x = GitlabIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabIntegration) ProtoMessage() {}

func (x *GitlabIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabIntegration.ProtoReflect.Descriptor instead.
func (*GitlabIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{45}
}

func (x *GitlabIntegration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GitlabIntegration) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *GitlabIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *GitlabIntegration) GetEventType() GitlabIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *GitlabIntegration) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GitlabIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GitlabIntegration) GetWebhookId() *Int32Null {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Language) Reset() {
	*x = Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{46}
}

func (x *Language) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LocationServiceStackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackName            string `protobuf:"bytes,1,opt,name=serviceStackName,proto3" json:"serviceStackName,omitempty"`
	ServiceStackTypeName        string `protobuf:"bytes,2,opt,name=serviceStackTypeName,proto3" json:"serviceStackTypeName,omitempty"`
	ServiceStackTypeVersionName string `protobuf:"bytes,3,opt,name=serviceStackTypeVersionName,proto3" json:"serviceStackTypeVersionName,omitempty"`
}

func (x *LocationServiceStackInfo) Reset() {
	*x = LocationServiceStackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationServiceStackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationServiceStackInfo) ProtoMessage() {}

func (x *LocationServiceStackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationServiceStackInfo.ProtoReflect.Descriptor instead.
func (*LocationServiceStackInfo) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{47}
}

func (x *LocationServiceStackInfo) GetServiceStackName() string {
	if x != nil {
		return x.ServiceStackName
	}
	return ""
}

func (x *LocationServiceStackInfo) GetServiceStackTypeName() string {
	if x != nil {
		return x.ServiceStackTypeName
	}
	return ""
}

func (x *LocationServiceStackInfo) GetServiceStackTypeVersionName() string {
	if x != nil {
		return x.ServiceStackTypeVersionName
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                            string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId                      string         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name                          string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description                   *StringNull    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList                       []string       `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status                        ProjectStatus  `protobuf:"varint,6,opt,name=status,proto3,enum=zeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created                       *Timestamp     `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                    *Timestamp     `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	PublicIpV4                    *StringNull    `protobuf:"bytes,9,opt,name=publicIpV4,proto3" json:"publicIpV4,omitempty"`
	PublicIpV6                    *StringNull    `protobuf:"bytes,10,opt,name=publicIpV6,proto3" json:"publicIpV6,omitempty"`
	PublicIpV4PendingRequest      bool           `protobuf:"varint,11,opt,name=publicIpV4PendingRequest,proto3" json:"publicIpV4PendingRequest,omitempty"`
	PublicIpV4RequestDisabledTill *TimestampNull `protobuf:"bytes,12,opt,name=publicIpV4RequestDisabledTill,proto3" json:"publicIpV4RequestDisabledTill,omitempty"`
	ZeropsSubdomainHost           *StringNull    `protobuf:"bytes,13,opt,name=zeropsSubdomainHost,proto3" json:"zeropsSubdomainHost,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{48}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Project) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *Project) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *Project) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Project) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *Project) GetPublicIpV4() *StringNull {
	if x != nil {
		return x.PublicIpV4
	}
	return nil
}

func (x *Project) GetPublicIpV6() *StringNull {
	if x != nil {
		return x.PublicIpV6
	}
	return nil
}

func (x *Project) GetPublicIpV4PendingRequest() bool {
	if x != nil {
		return x.PublicIpV4PendingRequest
	}
	return false
}

func (x *Project) GetPublicIpV4RequestDisabledTill() *TimestampNull {
	if x != nil {
		return x.PublicIpV4RequestDisabledTill
	}
	return nil
}

func (x *Project) GetZeropsSubdomainHost() *StringNull {
	if x != nil {
		return x.ZeropsSubdomainHost
	}
	return nil
}

type ProjectLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId    string        `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *StringNull   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList     []string      `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status      ProjectStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created     *Timestamp    `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate  *Timestamp    `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *ProjectLight) Reset() {
	*x = ProjectLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLight) ProtoMessage() {}

func (x *ProjectLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLight.ProtoReflect.Descriptor instead.
func (*ProjectLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{49}
}

func (x *ProjectLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectLight) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProjectLight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLight) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ProjectLight) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ProjectLight) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *ProjectLight) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProjectLight) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type ProjectLightJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId    string        `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *StringNull   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList     []string      `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status      ProjectStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created     *Timestamp    `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate  *Timestamp    `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *ProjectLightJsonObject) Reset() {
	*x = ProjectLightJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLightJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLightJsonObject) ProtoMessage() {}

func (x *ProjectLightJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLightJsonObject.ProtoReflect.Descriptor instead.
func (*ProjectLightJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{50}
}

func (x *ProjectLightJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectLightJsonObject) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProjectLightJsonObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLightJsonObject) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ProjectLightJsonObject) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ProjectLightJsonObject) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *ProjectLightJsonObject) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProjectLightJsonObject) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type PublicHttpRoutingDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainName     string                                `protobuf:"bytes,1,opt,name=domainName,proto3" json:"domainName,omitempty"`
	DnsCheckStatus PublicHttpRoutingDomainDnsCheckStatus `protobuf:"varint,2,opt,name=dnsCheckStatus,proto3,enum=zeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus" json:"dnsCheckStatus,omitempty"`
	SslStatus      PublicHttpRoutingDomainSslStatus      `protobuf:"varint,3,opt,name=sslStatus,proto3,enum=zeropsApiProtocol.PublicHttpRoutingDomainSslStatus" json:"sslStatus,omitempty"`
}

func (x *PublicHttpRoutingDomain) Reset() {
	*x = PublicHttpRoutingDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingDomain) ProtoMessage() {}

func (x *PublicHttpRoutingDomain) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingDomain.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingDomain) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{51}
}

func (x *PublicHttpRoutingDomain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *PublicHttpRoutingDomain) GetDnsCheckStatus() PublicHttpRoutingDomainDnsCheckStatus {
	if x != nil {
		return x.DnsCheckStatus
	}
	return PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN
}

func (x *PublicHttpRoutingDomain) GetSslStatus() PublicHttpRoutingDomainSslStatus {
	if x != nil {
		return x.SslStatus
	}
	return PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN
}

type PublicHttpRoutingLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             string                    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port             int32                     `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServiceStackId   string                    `protobuf:"bytes,3,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ServiceStackInfo *LocationServiceStackInfo `protobuf:"bytes,4,opt,name=serviceStackInfo,proto3" json:"serviceStackInfo,omitempty"`
}

func (x *PublicHttpRoutingLocation) Reset() {
	*x = PublicHttpRoutingLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingLocation) ProtoMessage() {}

func (x *PublicHttpRoutingLocation) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingLocation.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingLocation) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{52}
}

func (x *PublicHttpRoutingLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicHttpRoutingLocation) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PublicHttpRoutingLocation) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PublicHttpRoutingLocation) GetServiceStackInfo() *LocationServiceStackInfo {
	if x != nil {
		return x.ServiceStackInfo
	}
	return nil
}

type RequestedPortsJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive       bool           `protobuf:"varint,1,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RequestedPorts []*ServicePort `protobuf:"bytes,2,rep,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
}

func (x *RequestedPortsJsonObject) Reset() {
	*x = RequestedPortsJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedPortsJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedPortsJsonObject) ProtoMessage() {}

func (x *RequestedPortsJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedPortsJsonObject.ProtoReflect.Descriptor instead.
func (*RequestedPortsJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{53}
}

func (x *RequestedPortsJsonObject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *RequestedPortsJsonObject) GetRequestedPorts() []*ServicePort {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

type ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    ServicePortProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=zeropsApiProtocol.ServicePortProtocol" json:"protocol,omitempty"`
	Port        int32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Scheme      ServicePortScheme   `protobuf:"varint,4,opt,name=scheme,proto3,enum=zeropsApiProtocol.ServicePortScheme" json:"scheme,omitempty"`
	ServiceId   *StringNull         `protobuf:"bytes,5,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{54}
}

func (x *ServicePort) GetProtocol() ServicePortProtocol {
	if x != nil {
		return x.Protocol
	}
	return ServicePortProtocol_SERVICE_PORT_PROTOCOL_UNKNOWN
}

func (x *ServicePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServicePort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServicePort) GetScheme() ServicePortScheme {
	if x != nil {
		return x.Scheme
	}
	return ServicePortScheme_SERVICE_PORT_SCHEME_UNKNOWN
}

func (x *ServicePort) GetServiceId() *StringNull {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

type ServiceStackConnectedServiceStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStack *ServiceStackLight           `protobuf:"bytes,1,opt,name=serviceStack,proto3" json:"serviceStack,omitempty"`
	Status       ServiceStackConnectionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zeropsApiProtocol.ServiceStackConnectionStatus" json:"status,omitempty"`
}

func (x *ServiceStackConnectedServiceStack) Reset() {
	*x = ServiceStackConnectedServiceStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackConnectedServiceStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackConnectedServiceStack) ProtoMessage() {}

func (x *ServiceStackConnectedServiceStack) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackConnectedServiceStack.ProtoReflect.Descriptor instead.
func (*ServiceStackConnectedServiceStack) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{55}
}

func (x *ServiceStackConnectedServiceStack) GetServiceStack() *ServiceStackLight {
	if x != nil {
		return x.ServiceStack
	}
	return nil
}

func (x *ServiceStackConnectedServiceStack) GetStatus() ServiceStackConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_UNKNOWN
}

type ServiceStackInfoJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackTypeName        string                                             `protobuf:"bytes,1,opt,name=serviceStackTypeName,proto3" json:"serviceStackTypeName,omitempty"`
	ServiceStackTypeCategory    ServiceStackInfoJsonObjectServiceStackTypeCategory `protobuf:"varint,2,opt,name=serviceStackTypeCategory,proto3,enum=zeropsApiProtocol.ServiceStackInfoJsonObjectServiceStackTypeCategory" json:"serviceStackTypeCategory,omitempty"`
	ServiceStackTypeVersionName string                                             `protobuf:"bytes,3,opt,name=serviceStackTypeVersionName,proto3" json:"serviceStackTypeVersionName,omitempty"`
}

func (x *ServiceStackInfoJsonObject) Reset() {
	*x = ServiceStackInfoJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackInfoJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackInfoJsonObject) ProtoMessage() {}

func (x *ServiceStackInfoJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackInfoJsonObject.ProtoReflect.Descriptor instead.
func (*ServiceStackInfoJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{56}
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeName() string {
	if x != nil {
		return x.ServiceStackTypeName
	}
	return ""
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeCategory() ServiceStackInfoJsonObjectServiceStackTypeCategory {
	if x != nil {
		return x.ServiceStackTypeCategory
	}
	return ServiceStackInfoJsonObjectServiceStackTypeCategory_SERVICE_STACK_INFO_JSON_OBJECT_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeVersionName() string {
	if x != nil {
		return x.ServiceStackTypeVersionName
	}
	return ""
}

type ServiceStackLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                    ServiceStackStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=zeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                      string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo      *ServiceStackInfoJsonObject `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId        string                      `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId string                      `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                  bool                        `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	GithubIntegration         *GithubIntegrationNull      `protobuf:"bytes,8,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration         *GitlabIntegrationNull      `protobuf:"bytes,9,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
}

func (x *ServiceStackLight) Reset() {
	*x = ServiceStackLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackLight) ProtoMessage() {}

func (x *ServiceStackLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackLight.ProtoReflect.Descriptor instead.
func (*ServiceStackLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{57}
}

func (x *ServiceStackLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceStackLight) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *ServiceStackLight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStackLight) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *ServiceStackLight) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *ServiceStackLight) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *ServiceStackLight) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *ServiceStackLight) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *ServiceStackLight) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

type ServiceStackLightJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created                   *Timestamp                  `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                *Timestamp                  `protobuf:"bytes,3,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	ProjectId                 string                      `protobuf:"bytes,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackTypeId        string                      `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId string                      `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	DriverId                  *StringNull                 `protobuf:"bytes,7,opt,name=driverId,proto3" json:"driverId,omitempty"`
	Name                      string                      `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo      *ServiceStackInfoJsonObject `protobuf:"bytes,9,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	Ports                     []*ServicePort              `protobuf:"bytes,10,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *ServiceStackLightJsonObject) Reset() {
	*x = ServiceStackLightJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackLightJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackLightJsonObject) ProtoMessage() {}

func (x *ServiceStackLightJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackLightJsonObject.ProtoReflect.Descriptor instead.
func (*ServiceStackLightJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{58}
}

func (x *ServiceStackLightJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetDriverId() *StringNull {
	if x != nil {
		return x.DriverId
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type UserAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeAvatarUrl    *StringNull `protobuf:"bytes,1,opt,name=largeAvatarUrl,proto3" json:"largeAvatarUrl,omitempty"`
	SmallAvatarUrl    *StringNull `protobuf:"bytes,2,opt,name=smallAvatarUrl,proto3" json:"smallAvatarUrl,omitempty"`
	ExternalAvatarUrl *StringNull `protobuf:"bytes,3,opt,name=externalAvatarUrl,proto3" json:"externalAvatarUrl,omitempty"`
}

func (x *UserAvatar) Reset() {
	*x = UserAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatar) ProtoMessage() {}

func (x *UserAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatar.ProtoReflect.Descriptor instead.
func (*UserAvatar) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{59}
}

func (x *UserAvatar) GetLargeAvatarUrl() *StringNull {
	if x != nil {
		return x.LargeAvatarUrl
	}
	return nil
}

func (x *UserAvatar) GetSmallAvatarUrl() *StringNull {
	if x != nil {
		return x.SmallAvatarUrl
	}
	return nil
}

func (x *UserAvatar) GetExternalAvatarUrl() *StringNull {
	if x != nil {
		return x.ExternalAvatarUrl
	}
	return nil
}

type UserJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      UserJsonObjectType `protobuf:"varint,1,opt,name=type,proto3,enum=zeropsApiProtocol.UserJsonObjectType" json:"type,omitempty"`
	Id        *StringNull        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Email     *StringNull        `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	FirstName *StringNull        `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	FullName  *StringNull        `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Avatar    *UserAvatarNull    `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserJsonObject) Reset() {
	*x = UserJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJsonObject) ProtoMessage() {}

func (x *UserJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJsonObject.ProtoReflect.Descriptor instead.
func (*UserJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{60}
}

func (x *UserJsonObject) GetType() UserJsonObjectType {
	if x != nil {
		return x.Type
	}
	return UserJsonObjectType_USER_JSON_OBJECT_TYPE_UNKNOWN
}

func (x *UserJsonObject) GetId() *StringNull {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserJsonObject) GetEmail() *StringNull {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UserJsonObject) GetFirstName() *StringNull {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *UserJsonObject) GetFullName() *StringNull {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *UserJsonObject) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type UserLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email     string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName  string          `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	FirstName string          `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  string          `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar    *UserAvatarNull `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserLight) Reset() {
	*x = UserLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLight) ProtoMessage() {}

func (x *UserLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLight.ProtoReflect.Descriptor instead.
func (*UserLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{61}
}

func (x *UserLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserLight) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserLight) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserLight) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserLight) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserLight) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type AppVersionBuildNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionBuild `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool             `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionBuildNull) Reset() {
	*x = AppVersionBuildNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionBuildNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionBuildNull) ProtoMessage() {}

func (x *AppVersionBuildNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionBuildNull.ProtoReflect.Descriptor instead.
func (*AppVersionBuildNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{62}
}

func (x *AppVersionBuildNull) GetValue() *AppVersionBuild {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionBuildNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionGithubIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionGithubIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                         `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionGithubIntegrationNull) Reset() {
	*x = AppVersionGithubIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGithubIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGithubIntegrationNull) ProtoMessage() {}

func (x *AppVersionGithubIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGithubIntegrationNull.ProtoReflect.Descriptor instead.
func (*AppVersionGithubIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{63}
}

func (x *AppVersionGithubIntegrationNull) GetValue() *AppVersionGithubIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionGithubIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionGitlabIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionGitlabIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                         `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionGitlabIntegrationNull) Reset() {
	*x = AppVersionGitlabIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGitlabIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGitlabIntegrationNull) ProtoMessage() {}

func (x *AppVersionGitlabIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGitlabIntegrationNull.ProtoReflect.Descriptor instead.
func (*AppVersionGitlabIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{64}
}

func (x *AppVersionGitlabIntegrationNull) GetValue() *AppVersionGitlabIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionGitlabIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionJsonObjectNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionJsonObject `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                  `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionJsonObjectNull) Reset() {
	*x = AppVersionJsonObjectNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionJsonObjectNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionJsonObjectNull) ProtoMessage() {}

func (x *AppVersionJsonObjectNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionJsonObjectNull.ProtoReflect.Descriptor instead.
func (*AppVersionJsonObjectNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{65}
}

func (x *AppVersionJsonObjectNull) GetValue() *AppVersionJsonObject {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionJsonObjectNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionLightNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionLight `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool             `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionLightNull) Reset() {
	*x = AppVersionLightNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionLightNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionLightNull) ProtoMessage() {}

func (x *AppVersionLightNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionLightNull.ProtoReflect.Descriptor instead.
func (*AppVersionLightNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{66}
}

func (x *AppVersionLightNull) GetValue() *AppVersionLight {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionLightNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GithubIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *GithubIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *GithubIntegrationNull) Reset() {
	*x = GithubIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubIntegrationNull) ProtoMessage() {}

func (x *GithubIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubIntegrationNull.ProtoReflect.Descriptor instead.
func (*GithubIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{67}
}

func (x *GithubIntegrationNull) GetValue() *GithubIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GithubIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GitlabIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *GitlabIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *GitlabIntegrationNull) Reset() {
	*x = GitlabIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabIntegrationNull) ProtoMessage() {}

func (x *GitlabIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabIntegrationNull.ProtoReflect.Descriptor instead.
func (*GitlabIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{68}
}

func (x *GitlabIntegrationNull) GetValue() *GitlabIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GitlabIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Int32Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool  `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *Int32Null) Reset() {
	*x = Int32Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Null) ProtoMessage() {}

func (x *Int32Null) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Null.ProtoReflect.Descriptor instead.
func (*Int32Null) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{69}
}

func (x *Int32Null) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Int32Null) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ProjectLightJsonObjectNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ProjectLightJsonObject `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                    `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ProjectLightJsonObjectNull) Reset() {
	*x = ProjectLightJsonObjectNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLightJsonObjectNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLightJsonObjectNull) ProtoMessage() {}

func (x *ProjectLightJsonObjectNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLightJsonObjectNull.ProtoReflect.Descriptor instead.
func (*ProjectLightJsonObjectNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{70}
}

func (x *ProjectLightJsonObjectNull) GetValue() *ProjectLightJsonObject {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ProjectLightJsonObjectNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type StringNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool   `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *StringNull) Reset() {
	*x = StringNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringNull) ProtoMessage() {}

func (x *StringNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringNull.ProtoReflect.Descriptor instead.
func (*StringNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{71}
}

func (x *StringNull) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type TimestampNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool       `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *TimestampNull) Reset() {
	*x = TimestampNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampNull) ProtoMessage() {}

func (x *TimestampNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampNull.ProtoReflect.Descriptor instead.
func (*TimestampNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{72}
}

func (x *TimestampNull) GetValue() *Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TimestampNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type UserAvatarNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UserAvatar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool        `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *UserAvatarNull) Reset() {
	*x = UserAvatarNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatarNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatarNull) ProtoMessage() {}

func (x *UserAvatarNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatarNull.ProtoReflect.Descriptor instead.
func (*UserAvatarNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{73}
}

func (x *UserAvatarNull) GetValue() *UserAvatar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserAvatarNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type UserJsonObjectNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UserJsonObject `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool            `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *UserJsonObjectNull) Reset() {
	*x = UserJsonObjectNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJsonObjectNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJsonObjectNull) ProtoMessage() {}

func (x *UserJsonObjectNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJsonObjectNull.ProtoReflect.Descriptor instead.
func (*UserJsonObjectNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{74}
}

func (x *UserJsonObjectNull) GetValue() *UserJsonObject {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserJsonObjectNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

var File_zeropsApiProtocol_proto protoreflect.FileDescriptor

var file_zeropsApiProtocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x53, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x51, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x73, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x4e, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x51, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x22, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x1a, 0x50, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x90, 0x06, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x45, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x83, 0x0e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x55,
	0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x61, 0x73,
	0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x68, 0x61, 0x73,
	0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x89, 0x0e, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x56, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x52, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x4e, 0x0a, 0x22, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x68,
	0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e,
	0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x41, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x8a, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x8e, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x83, 0x04, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xf4, 0x03, 0x0a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x8e, 0x01, 0x0a,
	0x16, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x6f, 0x0a,
	0x19, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0xa8,
	0x01, 0x0a, 0x23, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x38, 0x0a, 0x26, 0x50, 0x75, 0x74,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x30,
	0x0a, 0x1e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xfc, 0x02, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xcc, 0x02, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc,
	0x02, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x60, 0x0a,
	0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x60, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc4, 0x02, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xf5, 0x02, 0x0a, 0x11, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x49, 0x64, 0x22, 0xf5, 0x02, 0x0a, 0x11, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc7, 0x05, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x12,
	0x3d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x36, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x36, 0x12, 0x3a,
	0x0a, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x1d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x1d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x69,
	0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x13, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x53, 0x75, 0x62, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x13,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xe3, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x60, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x51, 0x0a, 0x09, 0x73, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7e, 0x0a,
	0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xb6, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x1a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x81,
	0x01, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x45, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x04, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a,
	0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x04, 0x0a, 0x1b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x4b, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xe2,
	0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x3b, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08,
	0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x65, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0x7d, 0x0a, 0x1f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x7d,
	0x0a, 0x1f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x6f, 0x0a,
	0x18, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x65,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0x69, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x09, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75,
	0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x5b,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x2a, 0xff, 0x41, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x55, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1f,
	0x0a, 0x1b, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54, 0x43, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09, 0x12,
	0x25, 0x0a, 0x21, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x53, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54,
	0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x10, 0x0f, 0x12, 0x38, 0x0a, 0x34, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x53, 0x53, 0x57,
	0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x10, 0x12, 0x12, 0x26,
	0x0a, 0x22, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x4e,
	0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f,
	0x50, 0x53, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f,
	0x54, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x1a, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x1b, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44,
	0x44, 0x45, 0x4e, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x23, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x24, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x26, 0x12, 0x34, 0x0a, 0x30,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48,
	0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x29, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x2b,
	0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x2c, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2d, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x2e, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x2f, 0x12, 0x27, 0x0a, 0x23, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x45,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x30, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x59, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x57,
	0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x31, 0x12, 0x24, 0x0a, 0x20, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x32, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x42, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x33, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x41, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x34, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x35, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x36, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x41, 0x4e,
	0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x37, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x38, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x39, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x3a, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x3b, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x10, 0x3c, 0x12, 0x28,
	0x0a, 0x24, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x3d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x40, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x41, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x42, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x43,
	0x12, 0x2d, 0x0a, 0x29, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x44, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x46, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x47, 0x12,
	0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x48,
	0x12, 0x38, 0x0a, 0x34, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x49, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x4a, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x4b, 0x12, 0x30,
	0x0a, 0x2c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x4c,
	0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x4d,
	0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0x4e, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e,
	0x10, 0x4f, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x50, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x51, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x52, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x53, 0x12,
	0x33, 0x0a, 0x2f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x55, 0x42, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x54, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x55,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x56, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10,
	0x57, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x58, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x59, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x5a, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x5b, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x5c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x5d, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x5e, 0x12, 0x24, 0x0a, 0x20, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x5f, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x60, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x62, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x63,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x64, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x66, 0x12,
	0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x67, 0x12, 0x39,
	0x0a, 0x35, 0x4c, 0x37, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x68, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x69, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x6a, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x6b, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x54, 0x5f, 0x4c,
	0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x6c, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x6d, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x6e, 0x12, 0x40, 0x0a, 0x3c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x6f, 0x12, 0x3d, 0x0a, 0x39, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x70, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x71, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x72, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x10, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x74, 0x12, 0x30, 0x0a,
	0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x51, 0x44, 0x4e, 0x10, 0x75, 0x12,
	0x24, 0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x76, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x77, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x78, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x10, 0x79, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x7a, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x7b, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x7c,
	0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x37,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10,
	0x7d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x53, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x7e, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44,
	0x10, 0x7f, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x80, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x81, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x82, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x83, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x84, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x85, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x86, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x44, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x87, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x88, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x89, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x8a, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4c, 0x4c, 0x10, 0x8b, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x8c, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8d, 0x01,
	0x12, 0x22, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x8e, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x8f, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4d,
	0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x90, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10,
	0x91, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x10, 0x92, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x93, 0x01, 0x12, 0x2a, 0x0a, 0x25,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x94, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x95, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x96, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x97, 0x01, 0x12, 0x3f,
	0x0a, 0x3a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x98, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x99, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x9a, 0x01, 0x12,
	0x17, 0x0a, 0x12, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x9b, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x9c, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x9d, 0x01,
	0x12, 0x2d, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9e, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9f, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x41,
	0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xa0, 0x01, 0x12, 0x23, 0x0a, 0x1e,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0xa1,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10,
	0xa2, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x4d,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0xa3, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xa4, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xa5, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41,
	0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0xa6, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0xa7, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x41,
	0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x45,
	0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x10, 0xa8, 0x01, 0x12, 0x26, 0x0a, 0x21,
	0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45,
	0x44, 0x10, 0xa9, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0xaa, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xab, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x5f, 0x50, 0x41,
	0x52, 0x53, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xac, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xad, 0x01, 0x12, 0x23, 0x0a, 0x1e,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xae,
	0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xaf, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0xb0, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0xb1, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0xb2, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xb3, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x44, 0x49, 0x46,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49,
	0x44, 0x53, 0x10, 0xb4, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb5, 0x01, 0x12, 0x2f,
	0x0a, 0x2a, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb6, 0x01, 0x12,
	0x2b, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xb7, 0x01, 0x12, 0x2d, 0x0a, 0x28,
	0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xb8, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xb9,
	0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10,
	0xba, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xbb, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xbc, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0xbd, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xbe, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xbf, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x4e, 0x4f, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc0, 0x01, 0x12, 0x26,
	0x0a, 0x21, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xc1, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0xc2, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x49, 0x54, 0x48,
	0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc3,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc4, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc5, 0x01, 0x12, 0x27,
	0x0a, 0x22, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0xc7, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x45,
	0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xc8, 0x01,
	0x12, 0x26, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xc9, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xca, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xcb, 0x01,
	0x12, 0x1d, 0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x45,
	0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0xcc, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0xcd, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0xce, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x10, 0xd1, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0xd2, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x47, 0x49,
	0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xd3, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x49, 0x54,
	0x48, 0x55, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x53, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xd4, 0x01, 0x12, 0x27,
	0x0a, 0x22, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0xd5, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x56, 0x41, 0x54, 0x41,
	0x52, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0xd6, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd7, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xd8, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x49, 0x54, 0x4c,
	0x41, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xd9, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xda, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xdb, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x49, 0x54, 0x4c,
	0x41, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xdc, 0x01, 0x12, 0x24, 0x0a, 0x1f,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0xdd, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0xde, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xdf, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x49, 0x54, 0x4c,
	0x41, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0xe0, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f,
	0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xe1, 0x01, 0x12, 0x28, 0x0a,
	0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xe2, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0xe3,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe4, 0x01, 0x12, 0x1c, 0x0a,
	0x17, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe5, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0xe6, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x5a,
	0x45, 0x52, 0x4f, 0x50, 0x53, 0x10, 0xe7, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0xe8, 0x01, 0x2a, 0xc6, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x41,
	0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x50, 0x50, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x24,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x41,
	0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41,
	0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10,
	0x01, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x47, 0x10, 0x02, 0x2a, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x04, 0x2a,
	0xf3, 0x02, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x08,
	0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x6b, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0x01, 0x2a, 0xc2, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x02, 0x2a, 0x98, 0x01, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x2a, 0x92, 0x02,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x08, 0x2a, 0xb3, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xf8, 0x02, 0x0a, 0x25, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x32,
	0x0a, 0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b,
	0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0xf0, 0x02, 0x0a, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x39, 0x0a, 0x35, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x44, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x3d, 0x0a, 0x39, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x02, 0x2a, 0xcf,
	0x02, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x74, 0x63, 0x70,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x10, 0x03, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x75, 0x64, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x10, 0x08, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x10, 0x09,
	0x2a, 0xd3, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xcd, 0x05, 0x0a, 0x32, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x0a,
	0x42, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x43, 0x0a, 0x3f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x4f, 0x0a, 0x4b, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4c, 0x37,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x02, 0x12, 0x47, 0x0a, 0x43, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x10, 0x03, 0x12, 0x43, 0x0a, 0x3f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x4d, 0x0a, 0x49, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x4d, 0x0a, 0x49, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x44, 0x0a, 0x40, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x47, 0x0a,
	0x43, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x08, 0x2a, 0x6c, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x48, 0x41, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x48, 0x41, 0x10, 0x02, 0x2a, 0xeb, 0x08, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x14, 0x12, 0x29, 0x0a,
	0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x16, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x2b, 0x0a,
	0x27, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x1a, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x1b, 0x2a, 0x9a, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x2a,
	0xbd, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a,
	0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x2a,
	0x56, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xd5, 0x09, 0x0a, 0x11, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x74, 0x0a,
	0x13, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x12, 0x2d, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x12, 0x35, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x27, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x2e, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x29, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74,
	0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x7a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x7a, 0x63, 0x6c, 0x69, 0x2f, 0x73, 0x72, 0x63,
	0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zeropsApiProtocol_proto_rawDescOnce sync.Once
	file_zeropsApiProtocol_proto_rawDescData = file_zeropsApiProtocol_proto_rawDesc
)

func file_zeropsApiProtocol_proto_rawDescGZIP() []byte {
	file_zeropsApiProtocol_proto_rawDescOnce.Do(func() {
		file_zeropsApiProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeropsApiProtocol_proto_rawDescData)
	})
	return file_zeropsApiProtocol_proto_rawDescData
}

var file_zeropsApiProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 22)
var file_zeropsApiProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_zeropsApiProtocol_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: zeropsApiProtocol.ErrorCode
	(AppVersionGithubIntegrationEventType)(0),               // 1: zeropsApiProtocol.AppVersionGithubIntegrationEventType
	(AppVersionGitlabIntegrationEventType)(0),               // 2: zeropsApiProtocol.AppVersionGitlabIntegrationEventType
	(AppVersionSource)(0),                                   // 3: zeropsApiProtocol.AppVersionSource
	(AppVersionStatus)(0),                                   // 4: zeropsApiProtocol.AppVersionStatus
	(ClientUserLightRoleCode)(0),                            // 5: zeropsApiProtocol.ClientUserLightRoleCode
	(ClientUserLightStatus)(0),                              // 6: zeropsApiProtocol.ClientUserLightStatus
	(GithubIntegrationEventType)(0),                         // 7: zeropsApiProtocol.GithubIntegrationEventType
	(GitlabIntegrationEventType)(0),                         // 8: zeropsApiProtocol.GitlabIntegrationEventType
	(ProcessStatus)(0),                                      // 9: zeropsApiProtocol.ProcessStatus
	(ProjectStatus)(0),                                      // 10: zeropsApiProtocol.ProjectStatus
	(PublicHttpRoutingDomainDnsCheckStatus)(0),              // 11: zeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus
	(PublicHttpRoutingDomainSslStatus)(0),                   // 12: zeropsApiProtocol.PublicHttpRoutingDomainSslStatus
	(ServicePortProtocol)(0),                                // 13: zeropsApiProtocol.ServicePortProtocol
	(ServicePortScheme)(0),                                  // 14: zeropsApiProtocol.ServicePortScheme
	(ServiceStackConnectionStatus)(0),                       // 15: zeropsApiProtocol.ServiceStackConnectionStatus
	(ServiceStackInfoJsonObjectServiceStackTypeCategory)(0), // 16: zeropsApiProtocol.ServiceStackInfoJsonObjectServiceStackTypeCategory
	(ServiceStackMode)(0),                                   // 17: zeropsApiProtocol.ServiceStackMode
	(ServiceStackStatus)(0),                                 // 18: zeropsApiProtocol.ServiceStackStatus
	(UserDataType)(0),                                       // 19: zeropsApiProtocol.UserDataType
	(UserJsonObjectType)(0),                                 // 20: zeropsApiProtocol.UserJsonObjectType
	(UserStatus)(0),                                         // 21: zeropsApiProtocol.UserStatus
	(*Error)(nil),                                           // 22: zeropsApiProtocol.Error
	(*Timestamp)(nil),                                       // 23: zeropsApiProtocol.Timestamp
	(*GetProcessRequest)(nil),                               // 24: zeropsApiProtocol.GetProcessRequest
	(*GetProjectLogRequest)(nil),                            // 25: zeropsApiProtocol.GetProjectLogRequest
	(*GetProjectsByNameRequest)(nil),                        // 26: zeropsApiProtocol.GetProjectsByNameRequest
	(*GetServiceStackRequest)(nil),                          // 27: zeropsApiProtocol.GetServiceStackRequest
	(*GetServiceStackByNameRequest)(nil),                    // 28: zeropsApiProtocol.GetServiceStackByNameRequest
	(*GetUserInfoRequest)(nil),                              // 29: zeropsApiProtocol.GetUserInfoRequest
	(*PostAppVersionRequest)(nil),                           // 30: zeropsApiProtocol.PostAppVersionRequest
	(*PostPublicHttpRoutingRequest)(nil),                    // 31: zeropsApiProtocol.PostPublicHttpRoutingRequest
	(*PostVpnRequestRequest)(nil),                           // 32: zeropsApiProtocol.PostVpnRequestRequest
	(*PublicHttpRoutingLocationPost)(nil),                   // 33: zeropsApiProtocol.PublicHttpRoutingLocationPost
	(*PutAppVersionBuildAndDeployRequest)(nil),              // 34: zeropsApiProtocol.PutAppVersionBuildAndDeployRequest
	(*PutAppVersionDeployRequest)(nil),                      // 35: zeropsApiProtocol.PutAppVersionDeployRequest
	(*GetProcessResponse)(nil),                              // 36: zeropsApiProtocol.GetProcessResponse
	(*GetProcessResponseDto)(nil),                           // 37: zeropsApiProtocol.GetProcessResponseDto
	(*GetProjectLogResponse)(nil),                           // 38: zeropsApiProtocol.GetProjectLogResponse
	(*GetProjectLogResponseDto)(nil),                        // 39: zeropsApiProtocol.GetProjectLogResponseDto
	(*GetProjectsByNameResponse)(nil),                       // 40: zeropsApiProtocol.GetProjectsByNameResponse
	(*GetProjectsByNameResponseDto)(nil),                    // 41: zeropsApiProtocol.GetProjectsByNameResponseDto
	(*GetServiceStackResponse)(nil),                         // 42: zeropsApiProtocol.GetServiceStackResponse
	(*GetServiceStackResponseDto)(nil),                      // 43: zeropsApiProtocol.GetServiceStackResponseDto
	(*GetServiceStackByNameResponse)(nil),                   // 44: zeropsApiProtocol.GetServiceStackByNameResponse
	(*GetServiceStackByNameResponseDto)(nil),                // 45: zeropsApiProtocol.GetServiceStackByNameResponseDto
	(*GetUserInfoResponse)(nil),                             // 46: zeropsApiProtocol.GetUserInfoResponse
	(*GetUserInfoResponseDto)(nil),                          // 47: zeropsApiProtocol.GetUserInfoResponseDto
	(*PostAppVersionResponse)(nil),                          // 48: zeropsApiProtocol.PostAppVersionResponse
	(*PostAppVersionResponseDto)(nil),                       // 49: zeropsApiProtocol.PostAppVersionResponseDto
	(*PostPublicHttpRoutingResponse)(nil),                   // 50: zeropsApiProtocol.PostPublicHttpRoutingResponse
	(*PostPublicHttpRoutingResponseDto)(nil),                // 51: zeropsApiProtocol.PostPublicHttpRoutingResponseDto
	(*PostVpnRequestResponse)(nil),                          // 52: zeropsApiProtocol.PostVpnRequestResponse
	(*PostVpnRequestResponseDto)(nil),                       // 53: zeropsApiProtocol.PostVpnRequestResponseDto
	(*PutAppVersionBuildAndDeployResponse)(nil),             // 54: zeropsApiProtocol.PutAppVersionBuildAndDeployResponse
	(*PutAppVersionBuildAndDeployResponseDto)(nil),          // 55: zeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto
	(*PutAppVersionDeployResponse)(nil),                     // 56: zeropsApiProtocol.PutAppVersionDeployResponse
	(*PutAppVersionDeployResponseDto)(nil),                  // 57: zeropsApiProtocol.PutAppVersionDeployResponseDto
	(*AppVersionBuild)(nil),                                 // 58: zeropsApiProtocol.AppVersionBuild
	(*AppVersionGithubIntegration)(nil),                     // 59: zeropsApiProtocol.AppVersionGithubIntegration
	(*AppVersionGitlabIntegration)(nil),                     // 60: zeropsApiProtocol.AppVersionGitlabIntegration
	(*AppVersionJsonObject)(nil),                            // 61: zeropsApiProtocol.AppVersionJsonObject
	(*AppVersionLight)(nil),                                 // 62: zeropsApiProtocol.AppVersionLight
	(*AppVersionUserData)(nil),                              // 63: zeropsApiProtocol.AppVersionUserData
	(*ClientLight)(nil),                                     // 64: zeropsApiProtocol.ClientLight
	(*ClientUser)(nil),                                      // 65: zeropsApiProtocol.ClientUser
	(*GithubIntegration)(nil),                               // 66: zeropsApiProtocol.GithubIntegration
	(*GitlabIntegration)(nil),                               // 67: zeropsApiProtocol.GitlabIntegration
	(*Language)(nil),                                        // 68: zeropsApiProtocol.Language
	(*LocationServiceStackInfo)(nil),                        // 69: zeropsApiProtocol.LocationServiceStackInfo
	(*Project)(nil),                                         // 70: zeropsApiProtocol.Project
	(*ProjectLight)(nil),                                    // 71: zeropsApiProtocol.ProjectLight
	(*ProjectLightJsonObject)(nil),                          // 72: zeropsApiProtocol.ProjectLightJsonObject
	(*PublicHttpRoutingDomain)(nil),                         // 73: zeropsApiProtocol.PublicHttpRoutingDomain
	(*PublicHttpRoutingLocation)(nil),                       // 74: zeropsApiProtocol.PublicHttpRoutingLocation
	(*RequestedPortsJsonObject)(nil),                        // 75: zeropsApiProtocol.RequestedPortsJsonObject
	(*ServicePort)(nil),                                     // 76: zeropsApiProtocol.ServicePort
	(*ServiceStackConnectedServiceStack)(nil),               // 77: zeropsApiProtocol.ServiceStackConnectedServiceStack
	(*ServiceStackInfoJsonObject)(nil),                      // 78: zeropsApiProtocol.ServiceStackInfoJsonObject
	(*ServiceStackLight)(nil),                               // 79: zeropsApiProtocol.ServiceStackLight
	(*ServiceStackLightJsonObject)(nil),                     // 80: zeropsApiProtocol.ServiceStackLightJsonObject
	(*UserAvatar)(nil),                                      // 81: zeropsApiProtocol.UserAvatar
	(*UserJsonObject)(nil),                                  // 82: zeropsApiProtocol.UserJsonObject
	(*UserLight)(nil),                                       // 83: zeropsApiProtocol.UserLight
	(*AppVersionBuildNull)(nil),                             // 84: zeropsApiProtocol.AppVersionBuildNull
	(*AppVersionGithubIntegrationNull)(nil),                 // 85: zeropsApiProtocol.AppVersionGithubIntegrationNull
	(*AppVersionGitlabIntegrationNull)(nil),                 // 86: zeropsApiProtocol.AppVersionGitlabIntegrationNull
	(*AppVersionJsonObjectNull)(nil),                        // 87: zeropsApiProtocol.AppVersionJsonObjectNull
	(*AppVersionLightNull)(nil),                             // 88: zeropsApiProtocol.AppVersionLightNull
	(*GithubIntegrationNull)(nil),                           // 89: zeropsApiProtocol.GithubIntegrationNull
	(*GitlabIntegrationNull)(nil),                           // 90: zeropsApiProtocol.GitlabIntegrationNull
	(*Int32Null)(nil),                                       // 91: zeropsApiProtocol.Int32Null
	(*ProjectLightJsonObjectNull)(nil),                      // 92: zeropsApiProtocol.ProjectLightJsonObjectNull
	(*StringNull)(nil),                                      // 93: zeropsApiProtocol.StringNull
	(*TimestampNull)(nil),                                   // 94: zeropsApiProtocol.TimestampNull
	(*UserAvatarNull)(nil),                                  // 95: zeropsApiProtocol.UserAvatarNull
	(*UserJsonObjectNull)(nil),                              // 96: zeropsApiProtocol.UserJsonObjectNull
}
var file_zeropsApiProtocol_proto_depIdxs = []int32{
	0,   // 0: zeropsApiProtocol.Error.code:type_name -> zeropsApiProtocol.ErrorCode
	93,  // 1: zeropsApiProtocol.PostAppVersionRequest.name:type_name -> zeropsApiProtocol.StringNull
	33,  // 2: zeropsApiProtocol.PostPublicHttpRoutingRequest.locations:type_name -> zeropsApiProtocol.PublicHttpRoutingLocationPost
	22,  // 3: zeropsApiProtocol.GetProcessResponse.error:type_name -> zeropsApiProtocol.Error
	37,  // 4: zeropsApiProtocol.GetProcessResponse.output:type_name -> zeropsApiProtocol.GetProcessResponseDto
	92,  // 5: zeropsApiProtocol.GetProcessResponseDto.project:type_name -> zeropsApiProtocol.ProjectLightJsonObjectNull
	80,  // 6: zeropsApiProtocol.GetProcessResponseDto.serviceStacks:type_name -> zeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 7: zeropsApiProtocol.GetProcessResponseDto.status:type_name -> zeropsApiProtocol.ProcessStatus
	82,  // 8: zeropsApiProtocol.GetProcessResponseDto.createdByUser:type_name -> zeropsApiProtocol.UserJsonObject
	96,  // 9: zeropsApiProtocol.GetProcessResponseDto.canceledByUser:type_name -> zeropsApiProtocol.UserJsonObjectNull
	93,  // 10: zeropsApiProtocol.GetProcessResponseDto.blockedByProcessId:type_name -> zeropsApiProtocol.StringNull
	23,  // 11: zeropsApiProtocol.GetProcessResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 12: zeropsApiProtocol.GetProcessResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	87,  // 13: zeropsApiProtocol.GetProcessResponseDto.appVersion:type_name -> zeropsApiProtocol.AppVersionJsonObjectNull
	22,  // 14: zeropsApiProtocol.GetProjectLogResponse.error:type_name -> zeropsApiProtocol.Error
	39,  // 15: zeropsApiProtocol.GetProjectLogResponse.output:type_name -> zeropsApiProtocol.GetProjectLogResponseDto
	23,  // 16: zeropsApiProtocol.GetProjectLogResponseDto.expiry:type_name -> zeropsApiProtocol.Timestamp
	22,  // 17: zeropsApiProtocol.GetProjectsByNameResponse.error:type_name -> zeropsApiProtocol.Error
	41,  // 18: zeropsApiProtocol.GetProjectsByNameResponse.output:type_name -> zeropsApiProtocol.GetProjectsByNameResponseDto
	70,  // 19: zeropsApiProtocol.GetProjectsByNameResponseDto.projects:type_name -> zeropsApiProtocol.Project
	22,  // 20: zeropsApiProtocol.GetServiceStackResponse.error:type_name -> zeropsApiProtocol.Error
	43,  // 21: zeropsApiProtocol.GetServiceStackResponse.output:type_name -> zeropsApiProtocol.GetServiceStackResponseDto
	18,  // 22: zeropsApiProtocol.GetServiceStackResponseDto.status:type_name -> zeropsApiProtocol.ServiceStackStatus
	78,  // 23: zeropsApiProtocol.GetServiceStackResponseDto.serviceStackTypeInfo:type_name -> zeropsApiProtocol.ServiceStackInfoJsonObject
	89,  // 24: zeropsApiProtocol.GetServiceStackResponseDto.githubIntegration:type_name -> zeropsApiProtocol.GithubIntegrationNull
	90,  // 25: zeropsApiProtocol.GetServiceStackResponseDto.gitlabIntegration:type_name -> zeropsApiProtocol.GitlabIntegrationNull
	76,  // 26: zeropsApiProtocol.GetServiceStackResponseDto.ports:type_name -> zeropsApiProtocol.ServicePort
	75,  // 27: zeropsApiProtocol.GetServiceStackResponseDto.requestedPorts:type_name -> zeropsApiProtocol.RequestedPortsJsonObject
	23,  // 28: zeropsApiProtocol.GetServiceStackResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 29: zeropsApiProtocol.GetServiceStackResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	17,  // 30: zeropsApiProtocol.GetServiceStackResponseDto.mode:type_name -> zeropsApiProtocol.ServiceStackMode
	71,  // 31: zeropsApiProtocol.GetServiceStackResponseDto.project:type_name -> zeropsApiProtocol.ProjectLight
	77,  // 32: zeropsApiProtocol.GetServiceStackResponseDto.connectedStacks:type_name -> zeropsApiProtocol.ServiceStackConnectedServiceStack
	88,  // 33: zeropsApiProtocol.GetServiceStackResponseDto.activeAppVersion:type_name -> zeropsApiProtocol.AppVersionLightNull
	91,  // 34: zeropsApiProtocol.GetServiceStackResponseDto.activePublicHttpRoutingCount:type_name -> zeropsApiProtocol.Int32Null
	91,  // 35: zeropsApiProtocol.GetServiceStackResponseDto.activePublicPortRoutingCount:type_name -> zeropsApiProtocol.Int32Null
	22,  // 36: zeropsApiProtocol.GetServiceStackByNameResponse.error:type_name -> zeropsApiProtocol.Error
	45,  // 37: zeropsApiProtocol.GetServiceStackByNameResponse.output:type_name -> zeropsApiProtocol.GetServiceStackByNameResponseDto
	18,  // 38: zeropsApiProtocol.GetServiceStackByNameResponseDto.status:type_name -> zeropsApiProtocol.ServiceStackStatus
	78,  // 39: zeropsApiProtocol.GetServiceStackByNameResponseDto.serviceStackTypeInfo:type_name -> zeropsApiProtocol.ServiceStackInfoJsonObject
	89,  // 40: zeropsApiProtocol.GetServiceStackByNameResponseDto.githubIntegration:type_name -> zeropsApiProtocol.GithubIntegrationNull
	90,  // 41: zeropsApiProtocol.GetServiceStackByNameResponseDto.gitlabIntegration:type_name -> zeropsApiProtocol.GitlabIntegrationNull
	76,  // 42: zeropsApiProtocol.GetServiceStackByNameResponseDto.ports:type_name -> zeropsApiProtocol.ServicePort
	75,  // 43: zeropsApiProtocol.GetServiceStackByNameResponseDto.requestedPorts:type_name -> zeropsApiProtocol.RequestedPortsJsonObject
	23,  // 44: zeropsApiProtocol.GetServiceStackByNameResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 45: zeropsApiProtocol.GetServiceStackByNameResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	17,  // 46: zeropsApiProtocol.GetServiceStackByNameResponseDto.mode:type_name -> zeropsApiProtocol.ServiceStackMode
	71,  // 47: zeropsApiProtocol.GetServiceStackByNameResponseDto.project:type_name -> zeropsApiProtocol.ProjectLight
	77,  // 48: zeropsApiProtocol.GetServiceStackByNameResponseDto.connectedStacks:type_name -> zeropsApiProtocol.ServiceStackConnectedServiceStack
	88,  // 49: zeropsApiProtocol.GetServiceStackByNameResponseDto.activeAppVersion:type_name -> zeropsApiProtocol.AppVersionLightNull
	91,  // 50: zeropsApiProtocol.GetServiceStackByNameResponseDto.activePublicHttpRoutingCount:type_name -> zeropsApiProtocol.Int32Null
	91,  // 51: zeropsApiProtocol.GetServiceStackByNameResponseDto.activePublicPortRoutingCount:type_name -> zeropsApiProtocol.Int32Null
	22,  // 52: zeropsApiProtocol.GetUserInfoResponse.error:type_name -> zeropsApiProtocol.Error
	47,  // 53: zeropsApiProtocol.GetUserInfoResponse.output:type_name -> zeropsApiProtocol.GetUserInfoResponseDto
	95,  // 54: zeropsApiProtocol.GetUserInfoResponseDto.avatar:type_name -> zeropsApiProtocol.UserAvatarNull
	91,  // 55: zeropsApiProtocol.GetUserInfoResponseDto.countryCallingCode:type_name -> zeropsApiProtocol.Int32Null
	91,  // 56: zeropsApiProtocol.GetUserInfoResponseDto.phoneNumber:type_name -> zeropsApiProtocol.Int32Null
	68,  // 57: zeropsApiProtocol.GetUserInfoResponseDto.language:type_name -> zeropsApiProtocol.Language
	23,  // 58: zeropsApiProtocol.GetUserInfoResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 59: zeropsApiProtocol.GetUserInfoResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	21,  // 60: zeropsApiProtocol.GetUserInfoResponseDto.status:type_name -> zeropsApiProtocol.UserStatus
	65,  // 61: zeropsApiProtocol.GetUserInfoResponseDto.clientUserList:type_name -> zeropsApiProtocol.ClientUser
	22,  // 62: zeropsApiProtocol.PostAppVersionResponse.error:type_name -> zeropsApiProtocol.Error
	49,  // 63: zeropsApiProtocol.PostAppVersionResponse.output:type_name -> zeropsApiProtocol.PostAppVersionResponseDto
	84,  // 64: zeropsApiProtocol.PostAppVersionResponseDto.build:type_name -> zeropsApiProtocol.AppVersionBuildNull
	4,   // 65: zeropsApiProtocol.PostAppVersionResponseDto.status:type_name -> zeropsApiProtocol.AppVersionStatus
	63,  // 66: zeropsApiProtocol.PostAppVersionResponseDto.userDataList:type_name -> zeropsApiProtocol.AppVersionUserData
	23,  // 67: zeropsApiProtocol.PostAppVersionResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 68: zeropsApiProtocol.PostAppVersionResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	22,  // 69: zeropsApiProtocol.PostPublicHttpRoutingResponse.error:type_name -> zeropsApiProtocol.Error
	51,  // 70: zeropsApiProtocol.PostPublicHttpRoutingResponse.output:type_name -> zeropsApiProtocol.PostPublicHttpRoutingResponseDto
	73,  // 71: zeropsApiProtocol.PostPublicHttpRoutingResponseDto.domains:type_name -> zeropsApiProtocol.PublicHttpRoutingDomain
	74,  // 72: zeropsApiProtocol.PostPublicHttpRoutingResponseDto.locations:type_name -> zeropsApiProtocol.PublicHttpRoutingLocation
	23,  // 73: zeropsApiProtocol.PostPublicHttpRoutingResponseDto.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 74: zeropsApiProtocol.PostPublicHttpRoutingResponseDto.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	22,  // 75: zeropsApiProtocol.PostVpnRequestResponse.error:type_name -> zeropsApiProtocol.Error
	53,  // 76: zeropsApiProtocol.PostVpnRequestResponse.output:type_name -> zeropsApiProtocol.PostVpnRequestResponseDto
	23,  // 77: zeropsApiProtocol.PostVpnRequestResponseDto.expiry:type_name -> zeropsApiProtocol.Timestamp
	22,  // 78: zeropsApiProtocol.PutAppVersionBuildAndDeployResponse.error:type_name -> zeropsApiProtocol.Error
	55,  // 79: zeropsApiProtocol.PutAppVersionBuildAndDeployResponse.output:type_name -> zeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto
	22,  // 80: zeropsApiProtocol.PutAppVersionDeployResponse.error:type_name -> zeropsApiProtocol.Error
	57,  // 81: zeropsApiProtocol.PutAppVersionDeployResponse.output:type_name -> zeropsApiProtocol.PutAppVersionDeployResponseDto
	93,  // 82: zeropsApiProtocol.AppVersionBuild.serviceStackId:type_name -> zeropsApiProtocol.StringNull
	93,  // 83: zeropsApiProtocol.AppVersionBuild.serviceStackName:type_name -> zeropsApiProtocol.StringNull
	93,  // 84: zeropsApiProtocol.AppVersionBuild.serviceStackTypeVersionId:type_name -> zeropsApiProtocol.StringNull
	94,  // 85: zeropsApiProtocol.AppVersionBuild.startDate:type_name -> zeropsApiProtocol.TimestampNull
	94,  // 86: zeropsApiProtocol.AppVersionBuild.endDate:type_name -> zeropsApiProtocol.TimestampNull
	1,   // 87: zeropsApiProtocol.AppVersionGithubIntegration.eventType:type_name -> zeropsApiProtocol.AppVersionGithubIntegrationEventType
	93,  // 88: zeropsApiProtocol.AppVersionGithubIntegration.branchName:type_name -> zeropsApiProtocol.StringNull
	93,  // 89: zeropsApiProtocol.AppVersionGithubIntegration.tagName:type_name -> zeropsApiProtocol.StringNull
	2,   // 90: zeropsApiProtocol.AppVersionGitlabIntegration.eventType:type_name -> zeropsApiProtocol.AppVersionGitlabIntegrationEventType
	93,  // 91: zeropsApiProtocol.AppVersionGitlabIntegration.branchName:type_name -> zeropsApiProtocol.StringNull
	93,  // 92: zeropsApiProtocol.AppVersionGitlabIntegration.tagName:type_name -> zeropsApiProtocol.StringNull
	3,   // 93: zeropsApiProtocol.AppVersionJsonObject.source:type_name -> zeropsApiProtocol.AppVersionSource
	84,  // 94: zeropsApiProtocol.AppVersionJsonObject.build:type_name -> zeropsApiProtocol.AppVersionBuildNull
	85,  // 95: zeropsApiProtocol.AppVersionJsonObject.githubIntegration:type_name -> zeropsApiProtocol.AppVersionGithubIntegrationNull
	86,  // 96: zeropsApiProtocol.AppVersionJsonObject.gitlabIntegration:type_name -> zeropsApiProtocol.AppVersionGitlabIntegrationNull
	4,   // 97: zeropsApiProtocol.AppVersionLight.status:type_name -> zeropsApiProtocol.AppVersionStatus
	23,  // 98: zeropsApiProtocol.AppVersionLight.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 99: zeropsApiProtocol.AppVersionLight.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	19,  // 100: zeropsApiProtocol.AppVersionUserData.type:type_name -> zeropsApiProtocol.UserDataType
	93,  // 101: zeropsApiProtocol.ClientLight.companyNumber:type_name -> zeropsApiProtocol.StringNull
	93,  // 102: zeropsApiProtocol.ClientLight.vatNumber:type_name -> zeropsApiProtocol.StringNull
	6,   // 103: zeropsApiProtocol.ClientUser.status:type_name -> zeropsApiProtocol.ClientUserLightStatus
	5,   // 104: zeropsApiProtocol.ClientUser.roleCode:type_name -> zeropsApiProtocol.ClientUserLightRoleCode
	64,  // 105: zeropsApiProtocol.ClientUser.client:type_name -> zeropsApiProtocol.ClientLight
	83,  // 106: zeropsApiProtocol.ClientUser.user:type_name -> zeropsApiProtocol.UserLight
	93,  // 107: zeropsApiProtocol.GithubIntegration.branchName:type_name -> zeropsApiProtocol.StringNull
	7,   // 108: zeropsApiProtocol.GithubIntegration.eventType:type_name -> zeropsApiProtocol.GithubIntegrationEventType
	91,  // 109: zeropsApiProtocol.GithubIntegration.webhookId:type_name -> zeropsApiProtocol.Int32Null
	93,  // 110: zeropsApiProtocol.GitlabIntegration.branchName:type_name -> zeropsApiProtocol.StringNull
	8,   // 111: zeropsApiProtocol.GitlabIntegration.eventType:type_name -> zeropsApiProtocol.GitlabIntegrationEventType
	91,  // 112: zeropsApiProtocol.GitlabIntegration.webhookId:type_name -> zeropsApiProtocol.Int32Null
	93,  // 113: zeropsApiProtocol.Project.description:type_name -> zeropsApiProtocol.StringNull
	10,  // 114: zeropsApiProtocol.Project.status:type_name -> zeropsApiProtocol.ProjectStatus
	23,  // 115: zeropsApiProtocol.Project.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 116: zeropsApiProtocol.Project.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	93,  // 117: zeropsApiProtocol.Project.publicIpV4:type_name -> zeropsApiProtocol.StringNull
	93,  // 118: zeropsApiProtocol.Project.publicIpV6:type_name -> zeropsApiProtocol.StringNull
	94,  // 119: zeropsApiProtocol.Project.publicIpV4RequestDisabledTill:type_name -> zeropsApiProtocol.TimestampNull
	93,  // 120: zeropsApiProtocol.Project.zeropsSubdomainHost:type_name -> zeropsApiProtocol.StringNull
	93,  // 121: zeropsApiProtocol.ProjectLight.description:type_name -> zeropsApiProtocol.StringNull
	10,  // 122: zeropsApiProtocol.ProjectLight.status:type_name -> zeropsApiProtocol.ProjectStatus
	23,  // 123: zeropsApiProtocol.ProjectLight.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 124: zeropsApiProtocol.ProjectLight.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	93,  // 125: zeropsApiProtocol.ProjectLightJsonObject.description:type_name -> zeropsApiProtocol.StringNull
	10,  // 126: zeropsApiProtocol.ProjectLightJsonObject.status:type_name -> zeropsApiProtocol.ProjectStatus
	23,  // 127: zeropsApiProtocol.ProjectLightJsonObject.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 128: zeropsApiProtocol.ProjectLightJsonObject.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	11,  // 129: zeropsApiProtocol.PublicHttpRoutingDomain.dnsCheckStatus:type_name -> zeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus
	12,  // 130: zeropsApiProtocol.PublicHttpRoutingDomain.sslStatus:type_name -> zeropsApiProtocol.PublicHttpRoutingDomainSslStatus
	69,  // 131: zeropsApiProtocol.PublicHttpRoutingLocation.serviceStackInfo:type_name -> zeropsApiProtocol.LocationServiceStackInfo
	76,  // 132: zeropsApiProtocol.RequestedPortsJsonObject.requestedPorts:type_name -> zeropsApiProtocol.ServicePort
	13,  // 133: zeropsApiProtocol.ServicePort.protocol:type_name -> zeropsApiProtocol.ServicePortProtocol
	14,  // 134: zeropsApiProtocol.ServicePort.scheme:type_name -> zeropsApiProtocol.ServicePortScheme
	93,  // 135: zeropsApiProtocol.ServicePort.serviceId:type_name -> zeropsApiProtocol.StringNull
	79,  // 136: zeropsApiProtocol.ServiceStackConnectedServiceStack.serviceStack:type_name -> zeropsApiProtocol.ServiceStackLight
	15,  // 137: zeropsApiProtocol.ServiceStackConnectedServiceStack.status:type_name -> zeropsApiProtocol.ServiceStackConnectionStatus
	16,  // 138: zeropsApiProtocol.ServiceStackInfoJsonObject.serviceStackTypeCategory:type_name -> zeropsApiProtocol.ServiceStackInfoJsonObjectServiceStackTypeCategory
	18,  // 139: zeropsApiProtocol.ServiceStackLight.status:type_name -> zeropsApiProtocol.ServiceStackStatus
	78,  // 140: zeropsApiProtocol.ServiceStackLight.serviceStackTypeInfo:type_name -> zeropsApiProtocol.ServiceStackInfoJsonObject
	89,  // 141: zeropsApiProtocol.ServiceStackLight.githubIntegration:type_name -> zeropsApiProtocol.GithubIntegrationNull
	90,  // 142: zeropsApiProtocol.ServiceStackLight.gitlabIntegration:type_name -> zeropsApiProtocol.GitlabIntegrationNull
	23,  // 143: zeropsApiProtocol.ServiceStackLightJsonObject.created:type_name -> zeropsApiProtocol.Timestamp
	23,  // 144: zeropsApiProtocol.ServiceStackLightJsonObject.lastUpdate:type_name -> zeropsApiProtocol.Timestamp
	93,  // 145: zeropsApiProtocol.ServiceStackLightJsonObject.driverId:type_name -> zeropsApiProtocol.StringNull
	78,  // 146: zeropsApiProtocol.ServiceStackLightJsonObject.serviceStackTypeInfo:type_name -> zeropsApiProtocol.ServiceStackInfoJsonObject
	76,  // 147: zeropsApiProtocol.ServiceStackLightJsonObject.ports:type_name -> zeropsApiProtocol.ServicePort
	93,  // 148: zeropsApiProtocol.UserAvatar.largeAvatarUrl:type_name -> zeropsApiProtocol.StringNull
	93,  // 149: zeropsApiProtocol.UserAvatar.smallAvatarUrl:type_name -> zeropsApiProtocol.StringNull
	93,  // 150: zeropsApiProtocol.UserAvatar.externalAvatarUrl:type_name -> zeropsApiProtocol.StringNull
	20,  // 151: zeropsApiProtocol.UserJsonObject.type:type_name -> zeropsApiProtocol.UserJsonObjectType
	93,  // 152: zeropsApiProtocol.UserJsonObject.id:type_name -> zeropsApiProtocol.StringNull
	93,  // 153: zeropsApiProtocol.UserJsonObject.email:type_name -> zeropsApiProtocol.StringNull
	93,  // 154: zeropsApiProtocol.UserJsonObject.firstName:type_name -> zeropsApiProtocol.StringNull
	93,  // 155: zeropsApiProtocol.UserJsonObject.fullName:type_name -> zeropsApiProtocol.StringNull
	95,  // 156: zeropsApiProtocol.UserJsonObject.avatar:type_name -> zeropsApiProtocol.UserAvatarNull
	95,  // 157: zeropsApiProtocol.UserLight.avatar:type_name -> zeropsApiProtocol.UserAvatarNull
	58,  // 158: zeropsApiProtocol.AppVersionBuildNull.value:type_name -> zeropsApiProtocol.AppVersionBuild
	59,  // 159: zeropsApiProtocol.AppVersionGithubIntegrationNull.value:type_name -> zeropsApiProtocol.AppVersionGithubIntegration
	60,  // 160: zeropsApiProtocol.AppVersionGitlabIntegrationNull.value:type_name -> zeropsApiProtocol.AppVersionGitlabIntegration
	61,  // 161: zeropsApiProtocol.AppVersionJsonObjectNull.value:type_name -> zeropsApiProtocol.AppVersionJsonObject
	62,  // 162: zeropsApiProtocol.AppVersionLightNull.value:type_name -> zeropsApiProtocol.AppVersionLight
	66,  // 163: zeropsApiProtocol.GithubIntegrationNull.value:type_name -> zeropsApiProtocol.GithubIntegration
	67,  // 164: zeropsApiProtocol.GitlabIntegrationNull.value:type_name -> zeropsApiProtocol.GitlabIntegration
	72,  // 165: zeropsApiProtocol.ProjectLightJsonObjectNull.value:type_name -> zeropsApiProtocol.ProjectLightJsonObject
	23,  // 166: zeropsApiProtocol.TimestampNull.value:type_name -> zeropsApiProtocol.Timestamp
	81,  // 167: zeropsApiProtocol.UserAvatarNull.value:type_name -> zeropsApiProtocol.UserAvatar
	82,  // 168: zeropsApiProtocol.UserJsonObjectNull.value:type_name -> zeropsApiProtocol.UserJsonObject
	35,  // 169: zeropsApiProtocol.zeropsApiProtocol.PutAppVersionDeploy:input_type -> zeropsApiProtocol.PutAppVersionDeployRequest
	34,  // 170: zeropsApiProtocol.zeropsApiProtocol.PutAppVersionBuildAndDeploy:input_type -> zeropsApiProtocol.PutAppVersionBuildAndDeployRequest
	30,  // 171: zeropsApiProtocol.zeropsApiProtocol.PostAppVersion:input_type -> zeropsApiProtocol.PostAppVersionRequest
	25,  // 172: zeropsApiProtocol.zeropsApiProtocol.GetProjectLog:input_type -> zeropsApiProtocol.GetProjectLogRequest
	26,  // 173: zeropsApiProtocol.zeropsApiProtocol.GetProjectsByName:input_type -> zeropsApiProtocol.GetProjectsByNameRequest
	24,  // 174: zeropsApiProtocol.zeropsApiProtocol.GetProcess:input_type -> zeropsApiProtocol.GetProcessRequest
	31,  // 175: zeropsApiProtocol.zeropsApiProtocol.PostPublicHttpRouting:input_type -> zeropsApiProtocol.PostPublicHttpRoutingRequest
	27,  // 176: zeropsApiProtocol.zeropsApiProtocol.GetServiceStack:input_type -> zeropsApiProtocol.GetServiceStackRequest
	28,  // 177: zeropsApiProtocol.zeropsApiProtocol.GetServiceStackByName:input_type -> zeropsApiProtocol.GetServiceStackByNameRequest
	29,  // 178: zeropsApiProtocol.zeropsApiProtocol.GetUserInfo:input_type -> zeropsApiProtocol.GetUserInfoRequest
	32,  // 179: zeropsApiProtocol.zeropsApiProtocol.PostVpnRequest:input_type -> zeropsApiProtocol.PostVpnRequestRequest
	56,  // 180: zeropsApiProtocol.zeropsApiProtocol.PutAppVersionDeploy:output_type -> zeropsApiProtocol.PutAppVersionDeployResponse
	54,  // 181: zeropsApiProtocol.zeropsApiProtocol.PutAppVersionBuildAndDeploy:output_type -> zeropsApiProtocol.PutAppVersionBuildAndDeployResponse
	48,  // 182: zeropsApiProtocol.zeropsApiProtocol.PostAppVersion:output_type -> zeropsApiProtocol.PostAppVersionResponse
	38,  // 183: zeropsApiProtocol.zeropsApiProtocol.GetProjectLog:output_type -> zeropsApiProtocol.GetProjectLogResponse
	40,  // 184: zeropsApiProtocol.zeropsApiProtocol.GetProjectsByName:output_type -> zeropsApiProtocol.GetProjectsByNameResponse
	36,  // 185: zeropsApiProtocol.zeropsApiProtocol.GetProcess:output_type -> zeropsApiProtocol.GetProcessResponse
	50,  // 186: zeropsApiProtocol.zeropsApiProtocol.PostPublicHttpRouting:output_type -> zeropsApiProtocol.PostPublicHttpRoutingResponse
	42,  // 187: zeropsApiProtocol.zeropsApiProtocol.GetServiceStack:output_type -> zeropsApiProtocol.GetServiceStackResponse
	44,  // 188: zeropsApiProtocol.zeropsApiProtocol.GetServiceStackByName:output_type -> zeropsApiProtocol.GetServiceStackByNameResponse
	46,  // 189: zeropsApiProtocol.zeropsApiProtocol.GetUserInfo:output_type -> zeropsApiProtocol.GetUserInfoResponse
	52,  // 190: zeropsApiProtocol.zeropsApiProtocol.PostVpnRequest:output_type -> zeropsApiProtocol.PostVpnRequestResponse
	180, // [180:191] is the sub-list for method output_type
	169, // [169:180] is the sub-list for method input_type
	169, // [169:169] is the sub-list for extension type_name
	169, // [169:169] is the sub-list for extension extendee
	0,   // [0:169] is the sub-list for field type_name
}

func init() { file_zeropsApiProtocol_proto_init() }
func file_zeropsApiProtocol_proto_init() {
	if File_zeropsApiProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeropsApiProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingLocationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectLogResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGithubIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGitlabIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationServiceStackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLightJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedPortsJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackConnectedServiceStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackInfoJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackLightJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionBuildNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGithubIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGitlabIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionJsonObjectNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionLightNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLightJsonObjectNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatarNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJsonObjectNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeropsApiProtocol_proto_rawDesc,
			NumEnums:      22,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zeropsApiProtocol_proto_goTypes,
		DependencyIndexes: file_zeropsApiProtocol_proto_depIdxs,
		EnumInfos:         file_zeropsApiProtocol_proto_enumTypes,
		MessageInfos:      file_zeropsApiProtocol_proto_msgTypes,
	}.Build()
	File_zeropsApiProtocol_proto = out.File
	file_zeropsApiProtocol_proto_rawDesc = nil
	file_zeropsApiProtocol_proto_goTypes = nil
	file_zeropsApiProtocol_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZeropsApiProtocolClient is the client API for ZeropsApiProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZeropsApiProtocolClient interface {
	PutAppVersionDeploy(ctx context.Context, in *PutAppVersionDeployRequest, opts ...grpc.CallOption) (*PutAppVersionDeployResponse, error)
	PutAppVersionBuildAndDeploy(ctx context.Context, in *PutAppVersionBuildAndDeployRequest, opts ...grpc.CallOption) (*PutAppVersionBuildAndDeployResponse, error)
	PostAppVersion(ctx context.Context, in *PostAppVersionRequest, opts ...grpc.CallOption) (*PostAppVersionResponse, error)
	GetProjectLog(ctx context.Context, in *GetProjectLogRequest, opts ...grpc.CallOption) (*GetProjectLogResponse, error)
	GetProjectsByName(ctx context.Context, in *GetProjectsByNameRequest, opts ...grpc.CallOption) (*GetProjectsByNameResponse, error)
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error)
	PostPublicHttpRouting(ctx context.Context, in *PostPublicHttpRoutingRequest, opts ...grpc.CallOption) (*PostPublicHttpRoutingResponse, error)
	GetServiceStack(ctx context.Context, in *GetServiceStackRequest, opts ...grpc.CallOption) (*GetServiceStackResponse, error)
	GetServiceStackByName(ctx context.Context, in *GetServiceStackByNameRequest, opts ...grpc.CallOption) (*GetServiceStackByNameResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	PostVpnRequest(ctx context.Context, in *PostVpnRequestRequest, opts ...grpc.CallOption) (*PostVpnRequestResponse, error)
}

type zeropsApiProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewZeropsApiProtocolClient(cc grpc.ClientConnInterface) ZeropsApiProtocolClient {
	return &zeropsApiProtocolClient{cc}
}

func (c *zeropsApiProtocolClient) PutAppVersionDeploy(ctx context.Context, in *PutAppVersionDeployRequest, opts ...grpc.CallOption) (*PutAppVersionDeployResponse, error) {
	out := new(PutAppVersionDeployResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/PutAppVersionDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) PutAppVersionBuildAndDeploy(ctx context.Context, in *PutAppVersionBuildAndDeployRequest, opts ...grpc.CallOption) (*PutAppVersionBuildAndDeployResponse, error) {
	out := new(PutAppVersionBuildAndDeployResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/PutAppVersionBuildAndDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) PostAppVersion(ctx context.Context, in *PostAppVersionRequest, opts ...grpc.CallOption) (*PostAppVersionResponse, error) {
	out := new(PostAppVersionResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/PostAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetProjectLog(ctx context.Context, in *GetProjectLogRequest, opts ...grpc.CallOption) (*GetProjectLogResponse, error) {
	out := new(GetProjectLogResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetProjectLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetProjectsByName(ctx context.Context, in *GetProjectsByNameRequest, opts ...grpc.CallOption) (*GetProjectsByNameResponse, error) {
	out := new(GetProjectsByNameResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetProjectsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error) {
	out := new(GetProcessResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) PostPublicHttpRouting(ctx context.Context, in *PostPublicHttpRoutingRequest, opts ...grpc.CallOption) (*PostPublicHttpRoutingResponse, error) {
	out := new(PostPublicHttpRoutingResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/PostPublicHttpRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetServiceStack(ctx context.Context, in *GetServiceStackRequest, opts ...grpc.CallOption) (*GetServiceStackResponse, error) {
	out := new(GetServiceStackResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetServiceStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetServiceStackByName(ctx context.Context, in *GetServiceStackByNameRequest, opts ...grpc.CallOption) (*GetServiceStackByNameResponse, error) {
	out := new(GetServiceStackByNameResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetServiceStackByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsApiProtocolClient) PostVpnRequest(ctx context.Context, in *PostVpnRequestRequest, opts ...grpc.CallOption) (*PostVpnRequestResponse, error) {
	out := new(PostVpnRequestResponse)
	err := c.cc.Invoke(ctx, "/zeropsApiProtocol.zeropsApiProtocol/PostVpnRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeropsApiProtocolServer is the server API for ZeropsApiProtocol service.
type ZeropsApiProtocolServer interface {
	PutAppVersionDeploy(context.Context, *PutAppVersionDeployRequest) (*PutAppVersionDeployResponse, error)
	PutAppVersionBuildAndDeploy(context.Context, *PutAppVersionBuildAndDeployRequest) (*PutAppVersionBuildAndDeployResponse, error)
	PostAppVersion(context.Context, *PostAppVersionRequest) (*PostAppVersionResponse, error)
	GetProjectLog(context.Context, *GetProjectLogRequest) (*GetProjectLogResponse, error)
	GetProjectsByName(context.Context, *GetProjectsByNameRequest) (*GetProjectsByNameResponse, error)
	GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error)
	PostPublicHttpRouting(context.Context, *PostPublicHttpRoutingRequest) (*PostPublicHttpRoutingResponse, error)
	GetServiceStack(context.Context, *GetServiceStackRequest) (*GetServiceStackResponse, error)
	GetServiceStackByName(context.Context, *GetServiceStackByNameRequest) (*GetServiceStackByNameResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	PostVpnRequest(context.Context, *PostVpnRequestRequest) (*PostVpnRequestResponse, error)
}

// UnimplementedZeropsApiProtocolServer can be embedded to have forward compatible implementations.
type UnimplementedZeropsApiProtocolServer struct {
}

func (*UnimplementedZeropsApiProtocolServer) PutAppVersionDeploy(context.Context, *PutAppVersionDeployRequest) (*PutAppVersionDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAppVersionDeploy not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) PutAppVersionBuildAndDeploy(context.Context, *PutAppVersionBuildAndDeployRequest) (*PutAppVersionBuildAndDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAppVersionBuildAndDeploy not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) PostAppVersion(context.Context, *PostAppVersionRequest) (*PostAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAppVersion not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetProjectLog(context.Context, *GetProjectLogRequest) (*GetProjectLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectLog not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetProjectsByName(context.Context, *GetProjectsByNameRequest) (*GetProjectsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByName not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) PostPublicHttpRouting(context.Context, *PostPublicHttpRoutingRequest) (*PostPublicHttpRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPublicHttpRouting not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetServiceStack(context.Context, *GetServiceStackRequest) (*GetServiceStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStack not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetServiceStackByName(context.Context, *GetServiceStackByNameRequest) (*GetServiceStackByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStackByName not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedZeropsApiProtocolServer) PostVpnRequest(context.Context, *PostVpnRequestRequest) (*PostVpnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVpnRequest not implemented")
}

func RegisterZeropsApiProtocolServer(s *grpc.Server, srv ZeropsApiProtocolServer) {
	s.RegisterService(&_ZeropsApiProtocol_serviceDesc, srv)
}

func _ZeropsApiProtocol_PutAppVersionDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAppVersionDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).PutAppVersionDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/PutAppVersionDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).PutAppVersionDeploy(ctx, req.(*PutAppVersionDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_PutAppVersionBuildAndDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAppVersionBuildAndDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).PutAppVersionBuildAndDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/PutAppVersionBuildAndDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).PutAppVersionBuildAndDeploy(ctx, req.(*PutAppVersionBuildAndDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_PostAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).PostAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/PostAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).PostAppVersion(ctx, req.(*PostAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetProjectLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetProjectLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetProjectLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetProjectLog(ctx, req.(*GetProjectLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetProjectsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetProjectsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetProjectsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetProjectsByName(ctx, req.(*GetProjectsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_PostPublicHttpRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPublicHttpRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).PostPublicHttpRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/PostPublicHttpRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).PostPublicHttpRouting(ctx, req.(*PostPublicHttpRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetServiceStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetServiceStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetServiceStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetServiceStack(ctx, req.(*GetServiceStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetServiceStackByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStackByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetServiceStackByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetServiceStackByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetServiceStackByName(ctx, req.(*GetServiceStackByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsApiProtocol_PostVpnRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVpnRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsApiProtocolServer).PostVpnRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsApiProtocol.zeropsApiProtocol/PostVpnRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsApiProtocolServer).PostVpnRequest(ctx, req.(*PostVpnRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZeropsApiProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zeropsApiProtocol.zeropsApiProtocol",
	HandlerType: (*ZeropsApiProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutAppVersionDeploy",
			Handler:    _ZeropsApiProtocol_PutAppVersionDeploy_Handler,
		},
		{
			MethodName: "PutAppVersionBuildAndDeploy",
			Handler:    _ZeropsApiProtocol_PutAppVersionBuildAndDeploy_Handler,
		},
		{
			MethodName: "PostAppVersion",
			Handler:    _ZeropsApiProtocol_PostAppVersion_Handler,
		},
		{
			MethodName: "GetProjectLog",
			Handler:    _ZeropsApiProtocol_GetProjectLog_Handler,
		},
		{
			MethodName: "GetProjectsByName",
			Handler:    _ZeropsApiProtocol_GetProjectsByName_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _ZeropsApiProtocol_GetProcess_Handler,
		},
		{
			MethodName: "PostPublicHttpRouting",
			Handler:    _ZeropsApiProtocol_PostPublicHttpRouting_Handler,
		},
		{
			MethodName: "GetServiceStack",
			Handler:    _ZeropsApiProtocol_GetServiceStack_Handler,
		},
		{
			MethodName: "GetServiceStackByName",
			Handler:    _ZeropsApiProtocol_GetServiceStackByName_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _ZeropsApiProtocol_GetUserInfo_Handler,
		},
		{
			MethodName: "PostVpnRequest",
			Handler:    _ZeropsApiProtocol_PostVpnRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeropsApiProtocol.proto",
}
